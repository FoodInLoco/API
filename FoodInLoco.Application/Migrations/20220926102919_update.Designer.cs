// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220926102919_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Auth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Auth", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Login = "admin",
                            Password = "kc32FulUhcTpC4F+31zW86SlCFFEKZIq1CO8UNkg4b6qIG6PvQCJ5+vFLD+O7DbPrZ2pl0kaQxuY2cZCOjQAg3sFEiNrNhljuoR6/I0Wke/XM02bnVX7NwlxF+ELM8/2UdTd2gkPhgOzsMagRTzHMrC1h0SNheT3DW+K4XZ1fidKhgvoQ4blpSZk1HUA2d34bIlN2RS6oEgL3CNV5qVlhjJ6kdupCw4NgxYefMPu7ih/5R3re+CCN+2KGlIp4mbyKxLsnYVmFBjVAgSXlZjh32eTXCfDznLP/0/OgkHl3mQbFgzCZkTKPqDSFAabk/HK+Vtoaa4/M3qiGvbU+TVVQ8pe60jg8OtbH5Ua5qjm8oAnR1FAmhnv/hn8jo6SkYazYf3nwVW5dPomoRlpKq854ZjoLULylwW1UHLWyTZg0aI0IDX5kJgwIcXcXLt0Yl4q4Utyrg8QNTgM+X+0H24GnJ8OcAHOsCOeRVLLaMAvvcRLXhU/mvRxWXDdbXt16UevrBeSXyG8hVC6WhyXFCWNREFJIXGPEI2PvWLRBvsxdcPJh6Pqd4E34a4SIYC6rhFfA1xL2crL3nFYicrwrupp9dYIU+NdeLvGPo6ZnwhU7aCw7OVrAC6rSAj+D10oaybHDzjrCEmoNO5J5cnTXBsx5F83f1mcHTDrrMFMi3Z/HYw=",
                            Roles = 3,
                            Salt = "6a5902f9-e463-4f2d-966d-754fd446908e"
                        },
                        new
                        {
                            Id = 2L,
                            Login = "macdonalds",
                            Password = "VNGkNYDzagz+ZJ0hG1QGEutunJnyO9Ki9CAHztSNm1B+hZLbKspJnZm6HzZfXdhb141AF2xAmsorcHHEZsZ55pf5rA+ktaLUsJjUmVhxj4lCpsBrD8lgqqseAzwnj6TQnf0t9dV5aAk8ukchWBuJmtcZtQR4DJmkt4+RxxCt8Iw+7eoW6ToR7iCtmytRbKuwm3yV3xvxIlVu2ZyvfkX7V/WifeHwztq/MTnsOc9hXSzI5AIYJtdAdMFjOtgyIwc5iAD7+M/73k5pIG06BPItzjidz6dFZ1ptJJiYoKcWyx3KeF2dMJH2PjHB8Yg+v57Ajvv/Y44mhyMm/OimK4KBervhncYRsRW2hbrylqDQjRibOeNjcmqFQ+0cXCk6S5U4I7AVNTqp7YtLYa0tXkof1s7MpGRwxVS2Y4YwZm+JUxR/GOLm4She82h4hwLyGKPujp3ctlisFbu8CUPBdlrDa1loqkftGottEs3WYcfUEE7d+iVwCNoNB5g5oB6h3sBd2tEtaVDYs2X/egcm7rB2o2/YQxOhTG9+d5YbdC54xV2nD5fA9HnoGP1DwQkmt+QAtTd0wb8Y1ocuEbfaloY0lpZiNFRD4Ih2a2WUyf9MFpenCxFV6w7oGCT9bgGOpsyLUFbtgNkPZSL/fU+bQujuAAn8+Fc3zuI50zc07ZEzkoU=",
                            Roles = 4,
                            Salt = "dd9dd0c8-6375-4627-bf63-815bc6ec9eeb"
                        },
                        new
                        {
                            Id = 3L,
                            Login = "pedro",
                            Password = "E78sPG8E3Rw4NmQ/BlbDhplyKJ2tF0Xi3xZFsFNECAazdS7x0jl43sjUZV1DeqXh8gMHh8SXGsex8miNMW4wZ+8r1r91CLi5sM+qj7EpdOCuWDRsrRnOl6HzBTG/WnhuvxNfhGJjNS/UvYJ3PXOa8KXGZ7OJcwMsUWubfrwErPoVP0oAFIHu8/JqTUmE8XcV7AgRb9iA/ZlLa8GYB8bg3DWUGt2EPEt8eMIOaZvUlMwMisHY9i29b1M2Hvrc3i9xJ8HgPpjIGzrnGVMzpNlKBJfCWFN8QKjzk1hjtxgJ/E+HmqqEVS1qsMoLbHYqiu4wMZOWNN6wtUM9tQ4tUXq4aGXN6Rmr5HierrRZ8A7v4gsN7jEgKLeXppAepaDWRzph+kaH/D2tCSLFfvqU7846gl5nfr3Sbzi7so9G+/k80HTna1g5jWFGfj8sBivASXiS2RYBUS/FYqafIlRqYepCPV/QkUu/dEUNAwStRNcMOdF0h/MDXyCYzzSAmZ1oFj8wPATXJ6W6Xkh9J8aNURmBMmLNsGXrKhAURykGd/Mkzp15kUVDQn9j8b/iBBUQ4hgblxbLEchrw/SLk4amldjgO+01Xb6FmflWCsgqCMSxsaWk3qkWpIntccgDrES6DaC9QbbuC0rg+qEHayztssjSTg11HPjMNY3HIwIYF1huJZY=",
                            Roles = 1,
                            Salt = "fbf4f452-2320-4f48-b904-603f033f690e"
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 9, 26, 10, 29, 18, 649, DateTimeKind.Utc).AddTicks(2319));

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InitialDate = new DateTime(2022, 9, 26, 10, 29, 18, 885, DateTimeKind.Utc).AddTicks(1629),
                            RestaurantId = 1L
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique();

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MenuId = 1L,
                            Photo = "foto qualquer",
                            Quantity = 1,
                            Status = 1,
                            Value = 11.99
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 2L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            AuthId = 3L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("EndAt")
                                .HasColumnType("integer")
                                .HasColumnName("EndAt");

                            b1.Property<int?>("StartAt")
                                .HasColumnType("integer")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Value = false
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuItemId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = 1L,
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Restaurant", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    CompanyName = "Mac Donalds",
                                    TradingName = "Méqui"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.User", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = 2L,
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = 2L,
                                    Value = "letter@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    FirstName = "Pedro",
                                    LastName = "Oliveira"
                                },
                                new
                                {
                                    UserId = 2L,
                                    FirstName = "Pedro",
                                    LastName = "Lopes"
                                });
                        });

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
