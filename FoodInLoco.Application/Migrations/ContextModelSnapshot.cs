// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18e899c2-9adb-495e-b148-769198414d88"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3279),
                            Date = new DateTime(2023, 5, 28, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3274),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("301a6d9d-5359-441a-8478-0d55c4b64975"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3405),
                            Date = new DateTime(2023, 5, 29, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3404),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b2a1a328-09a0-40ef-abf7-ea62dc1a4793"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3475),
                            Date = new DateTime(2023, 6, 3, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3474),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93eed682-c432-447b-affd-e8f056ddad54"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3595),
                            Status = 1,
                            TableId = new Guid("c4cf867d-1610-4c8d-a150-503b5a7ccdb2")
                        },
                        new
                        {
                            Id = new Guid("594764a7-b065-4cb5-b40c-bb1734b6cacf"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3599),
                            Status = 1,
                            TableId = new Guid("386098c7-7f8f-461c-b18c-c4f004c9295a")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62d34834-8e42-44cd-b531-33230a5f7692"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(9504),
                            InitialDate = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(9504),
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("51e1fddf-4bd1-46ef-8c6c-8caa48254e14"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(9797),
                            InitialDate = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(9797),
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2158),
                            InitialDate = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2156),
                            RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84f783cb-ede7-499c-94f7-dc53426a5693"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2671),
                            MenuId = new Guid("62d34834-8e42-44cd-b531-33230a5f7692"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("a9ebef60-80c9-45a3-b05d-e3f303ed7ce3"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2824),
                            MenuId = new Guid("51e1fddf-4bd1-46ef-8c6c-8caa48254e14"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("7b8273d9-ea58-477b-a5e9-ba9b18fb6ab2"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2906),
                            MenuId = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("4d9f3e42-7338-4c6f-9c06-ed65d25bcbeb"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(2986),
                            MenuId = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("994b74af-1368-4eae-b5dd-78715a729f0d"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3113),
                            MenuId = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("b7620156-6d24-43ae-927c-1a9a8dd50fd9"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3193),
                            MenuId = new Guid("51e1fddf-4bd1-46ef-8c6c-8caa48254e14"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bb3637b-ad5d-4e3a-9849-9c6db5e4b69b"),
                            BillId = new Guid("93eed682-c432-447b-affd-e8f056ddad54"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3614),
                            ItemId = new Guid("84f783cb-ede7-499c-94f7-dc53426a5693"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035")
                        },
                        new
                        {
                            Id = new Guid("7b74726b-c3db-4685-9e46-4f6358241b50"),
                            BillId = new Guid("93eed682-c432-447b-affd-e8f056ddad54"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3619),
                            ItemId = new Guid("a9ebef60-80c9-45a3-b05d-e3f303ed7ce3"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035")
                        },
                        new
                        {
                            Id = new Guid("8e6fb407-c85f-425b-b01e-7d174ec838e1"),
                            BillId = new Guid("594764a7-b065-4cb5-b40c-bb1734b6cacf"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3622),
                            ItemId = new Guid("7b8273d9-ea58-477b-a5e9-ba9b18fb6ab2"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035")
                        },
                        new
                        {
                            Id = new Guid("46bf1865-5f23-47cb-b11d-f32b0512ac1b"),
                            BillId = new Guid("594764a7-b065-4cb5-b40c-bb1734b6cacf"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3624),
                            ItemId = new Guid("994b74af-1368-4eae-b5dd-78715a729f0d"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(8341),
                            Kids = false,
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Status = 1,
                            UserId = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124")
                        },
                        new
                        {
                            Id = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(8900),
                            Kids = true,
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Status = 1,
                            UserId = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4cf867d-1610-4c8d-a150-503b5a7ccdb2"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3559),
                            Number = 1,
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c7a6dadb-8907-47d6-af23-5e04a5dfb086"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3567),
                            Number = 2,
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7d7b9291-d973-4d84-9e6e-6610e6680692"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3569),
                            Number = 3,
                            RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("386098c7-7f8f-461c-b18c-c4f004c9295a"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3571),
                            Number = 1,
                            RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5465368d-8190-4bc6-a7b6-1ca62dca4a7f"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 90, DateTimeKind.Utc).AddTicks(3576),
                            Number = 2,
                            RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 17, DateTimeKind.Utc).AddTicks(6414),
                            Password = "u9uJZwKsGC9udmXefeXtLxJS1NdZSNWLjBj0HWuzocx4CFCcnQ2PKJuYJNM7m9HDJvuBDX8yLxvqqJb3UYHzo/eyRDx+rLJr9cUWBBV7Ps/11hctSPEXetddzNCzGQ6z/LFn7Rm31/nV9tI7buCXjA1Q/Xk0b1KGRgAcJPfl5GXt3x86gPEawo9Jtnb0fmeX2C5fqOE653M7TiE/IWq67CBdewz3HOQc5N24MEh1aRng6iA2TDn2JgNMTex7AUZBN/ZCPWF87fcBEk0b2t1K/W2CuMj5QDqKaqHSMlvnKAP6+xJNsukj922ma3ayViTUPGX3/fbpk1TFk6Hw+Obn8OaYC/7fYkibouLwqpYeo/O01WhA7xgQEIa8gQlCD83Q6scUKCPNZo/XhADzUbbWpzhF9q7X4riPNPS6KAZCOJcJjairvpNRbesDaEAxwj0seEM1IsQ7e56jtyDbWJt0INtGZY3XOBYPKdn/EnKGtyZO0hfc1JhVYQbcIMm1PSxs/QHGLb7eTYPR/LsV8Poiu4Q4H22mFTmMT38IV3ueM2RTJ1LSlBfOylArTSlhO7WnQSV6N0/WESpmBXMWWUqgcgCRNqlX5IM0I4OYmHga6uTSH+mh2kwPxc/6jdCYcMVUcy/wlAaVoGFKdknSw3nHsxU/+xL14UrMh33gHnrRXMI=",
                            Roles = 7,
                            Salt = "b3b21bed-5289-41fa-96a9-0bfc1b47ea7a",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035"),
                            CreatedAt = new DateTime(2023, 5, 27, 19, 22, 6, 89, DateTimeKind.Utc).AddTicks(7030),
                            Password = "Ztb1gqtAubIBR192bSo335ZW3BV82hQKbgZRZT16bwY9dlol3d/upyXRyrhVnBeakGuzlPsdzdbW130g5hjGS/LyBsvfrZ7c2db9idJ3W2CpXbOtx3BhlY/A88zhTXPFQ5yk3w522JTbIiWZNJB8x+k0Cu5Z9Od4emcOH51QXZsydSEePI5FO08Xr8TIUB0hL4hYXXvAs5dKDtjGisZJFpzONC0uv1fYSESuckmkn6oNpJ86wBFzmY7IZj2vfD3/06BjeI+oJOFhIcPQ//weY2vKQauCDW+Gi7AHe+zxk73mktMbCSbXQVu8wgV1wat01ZLA1HuAvJUuSyNm4QTCnZwDczoPR/PMitYT51erXFTBfeXUp+Bz2r9+9Go/7LVi9k8xIJzDe1BqzojMN5kmtSwIPftUhZNDzPi68hLAqtSVr318owzGZxUGAHEtNa5FO31Yst1yZNvQ770p79G+5KokBeUjn8NUz5kgnWyDPI+6AHk8Gl1lMRohZEJu4+oG54ssSTAEN/25SYPqC18rLc02kE6op6n+fboSGGfWWB7g6BcTLouN+Vtyo4mPj17by2tRnmBEvD2n13o+J0AB6n8xsjmjpRqp/WFNqMBOiVtM6LOHk2SmNVIfLGWPad9lOwrSjfRmPD3okvLr0UYVZwjFboP/dIpp0AfRdlN6mWU=",
                            Roles = 1,
                            Salt = "bf40edfd-ce10-44c6-b2e2-d620653ad6a5",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("18e899c2-9adb-495e-b148-769198414d88"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("301a6d9d-5359-441a-8478-0d55c4b64975"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("b2a1a328-09a0-40ef-abf7-ea62dc1a4793"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("62d34834-8e42-44cd-b531-33230a5f7692"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("51e1fddf-4bd1-46ef-8c6c-8caa48254e14"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("62d34834-8e42-44cd-b531-33230a5f7692"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("51e1fddf-4bd1-46ef-8c6c-8caa48254e14"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("60c4fd70-2126-40be-a957-304154ae9a45"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("84f783cb-ede7-499c-94f7-dc53426a5693"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("a9ebef60-80c9-45a3-b05d-e3f303ed7ce3"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("7b8273d9-ea58-477b-a5e9-ba9b18fb6ab2"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("4d9f3e42-7338-4c6f-9c06-ed65d25bcbeb"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("994b74af-1368-4eae-b5dd-78715a729f0d"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("b7620156-6d24-43ae-927c-1a9a8dd50fd9"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("f8b15bcb-51aa-4f02-af83-a2cba043de6f"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("35ff541d-8213-4afe-ade1-8fbee8aa995f"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035"),
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("cc8f093a-9bc9-4272-8cdf-d03edc641124"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("b0f6eb83-46e3-41d8-a82b-a8a41298e035"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
