// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59f75798-646a-42bf-8d61-bc1506d3ce4e"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4431),
                            Date = new DateTime(2023, 5, 29, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4426),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f5a0a4a0-5062-48dd-b920-c25d80452605"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4552),
                            Date = new DateTime(2023, 5, 30, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4551),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f6992de0-e6cf-4d0d-b099-9e204ee5acd6"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4620),
                            Date = new DateTime(2023, 6, 4, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4619),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db3aa74f-9977-47d0-a62c-5b19f102394e"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4725),
                            Status = 1,
                            TableId = new Guid("6567c8a4-0067-48a1-8557-1ba402badb8c")
                        },
                        new
                        {
                            Id = new Guid("223c9e9a-24c0-4479-86b6-1c5f7dd969c3"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4729),
                            Status = 1,
                            TableId = new Guid("8c7cea46-a3d8-41b1-b6f2-1e27bba2a8db")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("db3aa74f-9977-47d0-a62c-5b19f102394e"),
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("db3aa74f-9977-47d0-a62c-5b19f102394e"),
                            UserId = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                            Status = 0
                        },
                        new
                        {
                            BillId = new Guid("223c9e9a-24c0-4479-86b6-1c5f7dd969c3"),
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("223c9e9a-24c0-4479-86b6-1c5f7dd969c3"),
                            UserId = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55321c95-66a8-490b-91f2-f269e419abec"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3051),
                            InitialDate = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3050),
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6aaf7dd2-3edf-476e-99eb-5ce14b671733"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3282),
                            InitialDate = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3282),
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3684),
                            InitialDate = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3683),
                            RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd71d070-db49-40a9-abc2-7e37accd3b4e"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3843),
                            MenuId = new Guid("55321c95-66a8-490b-91f2-f269e419abec"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("5e1037ff-0526-4c07-a605-85f74302bf60"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(3975),
                            MenuId = new Guid("6aaf7dd2-3edf-476e-99eb-5ce14b671733"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("6e01e40d-4b22-42b5-a597-f5345304e5b5"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4047),
                            MenuId = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("c242215a-5f3f-4c24-a19a-03e9b106c2b2"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4122),
                            MenuId = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("e8816335-7443-4c6b-b391-4034f7ee63b8"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4273),
                            MenuId = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("3bc25564-64f6-4284-80a8-387ce51922c8"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4343),
                            MenuId = new Guid("6aaf7dd2-3edf-476e-99eb-5ce14b671733"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08a45035-2824-4b9b-93f0-c53933365887"),
                            BillId = new Guid("db3aa74f-9977-47d0-a62c-5b19f102394e"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4776),
                            ItemId = new Guid("fd71d070-db49-40a9-abc2-7e37accd3b4e"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4")
                        },
                        new
                        {
                            Id = new Guid("18ff6a3e-b7c6-45ac-aa05-e85046fe381d"),
                            BillId = new Guid("db3aa74f-9977-47d0-a62c-5b19f102394e"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4781),
                            ItemId = new Guid("5e1037ff-0526-4c07-a605-85f74302bf60"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4")
                        },
                        new
                        {
                            Id = new Guid("25e96f3f-e7b1-4d5f-a68f-bc322527daae"),
                            BillId = new Guid("223c9e9a-24c0-4479-86b6-1c5f7dd969c3"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4786),
                            ItemId = new Guid("6e01e40d-4b22-42b5-a597-f5345304e5b5"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4")
                        },
                        new
                        {
                            Id = new Guid("41e80155-23cd-4704-bf5f-961c87576cf7"),
                            BillId = new Guid("223c9e9a-24c0-4479-86b6-1c5f7dd969c3"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4788),
                            ItemId = new Guid("e8816335-7443-4c6b-b391-4034f7ee63b8"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(192),
                            Kids = false,
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Status = 1,
                            UserId = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24")
                        },
                        new
                        {
                            Id = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(955),
                            Kids = true,
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Status = 1,
                            UserId = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6567c8a4-0067-48a1-8557-1ba402badb8c"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4693),
                            Number = 1,
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1bbdb507-d40a-4a65-b480-40bccc806f28"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4698),
                            Number = 2,
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cf89c4d3-bb2b-4bc7-af50-4f2f11835554"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4700),
                            Number = 3,
                            RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8c7cea46-a3d8-41b1-b6f2-1e27bba2a8db"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4702),
                            Number = 1,
                            RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("050b7cc5-3f90-44be-b38b-1319379732bd"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 369, DateTimeKind.Utc).AddTicks(4707),
                            Number = 2,
                            RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 246, DateTimeKind.Utc).AddTicks(7914),
                            Password = "mpmsJ2kVXD+7zbGnn/LAjUNHJ5Pbto8WWSb6s4g30324iTEltrEwz4s/UuKfOm9AKXdnqh8/e5MitRZotOU84l7ue4+Cm5vEE0lhd85dTS+OBqq7qwR7uhGz70ieOeER94kyxIrW11EMV4NxZ62Ip0JzAhvCntV5Ar3GcSob3tAT3xa/5wf+yFclzsCaFMdApgBCdcKKW1fDY8hbjhBB4MijievjxdKHYG6m0re7rD1c4pdnoO7FzrabBo+L5c/As0ixxatFy5gdcX8VtpdpMv7DuP1eYMe9mbPbrceBY0LMYMlECQhi8AjSz0cK+FHWeZJsXseQyH1Fwz7L7mJPUBdp7K30bwAgLdLlPYxtq153rg/Pb3eKYkykDU4eTPNpxhEr4+/G3nVEF0m6X1E1rCK7I/xSsuw+1AQ34JGizYaPTQ9WiElIMBNse9ZHYtqTgHtvGk/lCBBDwJfibHnxbvLPeT17sZiDedKrEXmvZe+wmHqzyaJMnrCaIunWM+7H4GkHpndP87Gq9tise+XJx5na36l1zTvXxOO5ZmL6d6IGgonjvSBRzAQ+0YULx87xSnXWUG9HoHRRriCWi2JYPyUijJ+/Yqs2dgXQbGaeDRouHKzjFf4ECjnIwXL+ar+1We4+Ti8VLL/XJ1bHqQ8nP9gcfcev9ck32gKlQhSYZIA=",
                            Roles = 7,
                            Salt = "7c337e37-5863-4207-9241-275c04bd0079",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 307, DateTimeKind.Utc).AddTicks(1285),
                            Password = "j4TgY9Nj1gt3BIwKoo6sqlSMyXAFJoJdZ/LPnWS9O4VaaLOnljge7f2JhzVdx72A3ebz2deima8X8Vj999XRa+2M9YS30sdXeP5v/8QPLrIK3wysyIeAcstAFlT9siS6G+qkfBhBDaaPLzZ1ccifsuwFvJtDWjYF6VjkGLmFICC/Y+n9rcolDKaxQl4ax/lqqIeszvQvkznqbvXqqYzQyJALxCwoLLeQ3WRIcEfPmeQhY18bsIq4ze0bQgK7UQvyy27YcX6ahsjy35Iwqf9kMOsTw1ThVPk6RSyvE/z5q0k3CZHM4rqS0B4oPOYYoZ4daInXLrsh1yUe70navy9emzT6/brN0ttZtlg+rlmZE13rDoUci/AyCNa8smkrOF8Jn/4egzwTIWRBQgl7LIbaUNR6WmT3J29Jx77uv4gLEdjMHpE57ymJqZPZ5vtybQk+UJwDId4fgqFqQPXZiAQ+lXWJs1yUjTvqGq4lTjFCYHirhjgD1PVQRwU4bTIpyydfMqkrfULkjQsdZ50+xypkf6XF0RtvKLV7L4h3kC9gqeUZQOaO8xcny3ImQbR++IdXgbP+TTr8569ChAGDCuE/OU5iUyWenlYGNOZF2NVWsQTMKzNH2rGYb4FyDCm3BuF7JF5IZRO0A08nXe94Ip4oKmZGdPZCsuVVCWM893eKz0U=",
                            Roles = 1,
                            Salt = "72aa4e23-b040-4119-b1c9-1763e2712620",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                            CreatedAt = new DateTime(2023, 5, 28, 0, 24, 26, 368, DateTimeKind.Utc).AddTicks(8638),
                            Password = "jYP1Pgx2mluRaVxIw5oMtq2Wd4ZqRBczrmmyX40WPxKpbXPaQwu6T9AzKO7yRpqIRkGG8RtbkXGE6l2oHrp5Lbml89f/gweauR4I3NCWlvncP0XGESMNt23ew/CR2lFjP7jlapLBuugkcJLo7hCFzRgxEg4bn8yddNU+ArOjRLl9kTe96v3QhFqtyO+D5KbRq3umF3MUfFY4Ekq2I4DFpvJteopr+pzJVNOk8mTokHPf2rqoOvL/f3moq6eob5h4dIzmJhE8IVo3RmVWEGcpaNlYjqiw5Oo8yHhK6kPeegwgp2RioQ+4NPVX49yWXAfLEvHPuvpJ5wadAJ3JEIRc1vkiEVaSrUO1/C1rbehkhDLrM7cF5dKMpNqHJKLTMba465FIyeUgT+GxdRX3MrsaNTYSSEyPW8UN7R7CHewSB9olSKXpWRgnAjp4ROHpNygBEFu0TgbAgYn7puU2bWUbNV5IB1rOi1l6Rn8GvXeAi1zlo/tG8+WmKmu7w5flcAHE1AgfYcdgVqQOW4rUYfeH+S3342rBaeQNMnfR9vPn1pWdpnni35Oov9QDmXJIDnFIfgCK2dqskb8SnEIX8mGGwgoEtz9NuOFVYge1hNtaGKM+kcZvFW3inQtQhWZtaHPWABvkIE32RvBX0iOlbXGpNUdvKljVprMZA0zEJNX2gnI=",
                            Roles = 1,
                            Salt = "1faa05d4-1d12-48bd-a3dc-fb7f29de4b90",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("59f75798-646a-42bf-8d61-bc1506d3ce4e"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("f5a0a4a0-5062-48dd-b920-c25d80452605"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("f6992de0-e6cf-4d0d-b099-9e204ee5acd6"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("55321c95-66a8-490b-91f2-f269e419abec"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("6aaf7dd2-3edf-476e-99eb-5ce14b671733"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("55321c95-66a8-490b-91f2-f269e419abec"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("6aaf7dd2-3edf-476e-99eb-5ce14b671733"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("15968327-5349-476c-bcfd-a760913a23ce"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("fd71d070-db49-40a9-abc2-7e37accd3b4e"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("5e1037ff-0526-4c07-a605-85f74302bf60"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("6e01e40d-4b22-42b5-a597-f5345304e5b5"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("c242215a-5f3f-4c24-a19a-03e9b106c2b2"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("e8816335-7443-4c6b-b391-4034f7ee63b8"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("3bc25564-64f6-4284-80a8-387ce51922c8"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("ffca0fdd-b31c-4fea-b18e-fb3021a4577e"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("8d420721-f914-4a00-8c3d-c83cb83b1570"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                                    DDD = "85",
                                    PhoneNumber = "999174742"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                                    Value = "gabrielevaristovcp@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("3a1ff367-3013-4a81-9118-7c9df5f13f24"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("de190574-dd9a-4d50-b5ec-baeb92fa83b4"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                },
                                new
                                {
                                    UserId = new Guid("964b7b6a-324d-4eac-b33d-576dc188fe24"),
                                    FirstName = "Gabriel",
                                    LastName = "Evaristo"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
