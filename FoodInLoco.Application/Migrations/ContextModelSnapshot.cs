// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64d2ffdd-9c0c-439d-bda0-720fcac75c30"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(513),
                            Date = new DateTime(2023, 6, 5, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(508),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bc74cffc-3b44-4c03-b7b8-772b84d6df1c"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(631),
                            Date = new DateTime(2023, 6, 6, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(629),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("25c682e7-8772-49a6-8676-d9a5e26e4026"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(678),
                            Date = new DateTime(2023, 6, 11, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(677),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WaiterRequested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e83641b-1d7e-438d-9529-9f748fe09e5e"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(767),
                            Status = 1,
                            TableId = new Guid("be763bde-2f53-4c81-b2ab-12644b5d7530")
                        },
                        new
                        {
                            Id = new Guid("7b6231f6-2f13-408c-8af7-6c0a4fa2df39"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(771),
                            Status = 1,
                            TableId = new Guid("852304b2-69a4-4ac1-a969-9f0228928d89")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("9e83641b-1d7e-438d-9529-9f748fe09e5e"),
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("9e83641b-1d7e-438d-9529-9f748fe09e5e"),
                            UserId = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                            Status = 0
                        },
                        new
                        {
                            BillId = new Guid("7b6231f6-2f13-408c-8af7-6c0a4fa2df39"),
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("7b6231f6-2f13-408c-8af7-6c0a4fa2df39"),
                            UserId = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("798d2b2a-ef46-4820-b5f2-deaa5c0e7fdc"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 6, DateTimeKind.Utc).AddTicks(9490),
                            InitialDate = new DateTime(2023, 6, 4, 1, 42, 30, 6, DateTimeKind.Utc).AddTicks(9489),
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("14a36c28-d565-42b5-8c07-dc084fb3e6b2"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 6, DateTimeKind.Utc).AddTicks(9782),
                            InitialDate = new DateTime(2023, 6, 4, 1, 42, 30, 6, DateTimeKind.Utc).AddTicks(9782),
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(14),
                            InitialDate = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(14),
                            RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87fa75e6-07a6-4853-b83d-36a39ae84868"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(133),
                            MenuId = new Guid("798d2b2a-ef46-4820-b5f2-deaa5c0e7fdc"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("04b8833d-fab2-4f49-8071-da89a5f42f1f"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(247),
                            MenuId = new Guid("14a36c28-d565-42b5-8c07-dc084fb3e6b2"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("8b42dda2-edb8-4c37-b90b-1e60f52dc5bc"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(300),
                            MenuId = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("3af3bb48-78ad-44a4-b0f9-904e6168d73d"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(345),
                            MenuId = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("3d36e22b-edea-44df-af8c-dc5f7666ec66"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(402),
                            MenuId = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("4b6e5fac-f995-4426-b9bf-5ffae3f4ca25"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(450),
                            MenuId = new Guid("14a36c28-d565-42b5-8c07-dc084fb3e6b2"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("228a9cb2-0da0-46c5-979b-e21991a148e2"),
                            BillId = new Guid("9e83641b-1d7e-438d-9529-9f748fe09e5e"),
                            Confirmed = true,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(816),
                            ItemId = new Guid("87fa75e6-07a6-4853-b83d-36a39ae84868"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769")
                        },
                        new
                        {
                            Id = new Guid("fb6b95e9-9058-4898-9985-26838c590a18"),
                            BillId = new Guid("9e83641b-1d7e-438d-9529-9f748fe09e5e"),
                            Confirmed = true,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(821),
                            ItemId = new Guid("04b8833d-fab2-4f49-8071-da89a5f42f1f"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769")
                        },
                        new
                        {
                            Id = new Guid("14c3f3f9-0c36-4567-837d-e3aed21cd6e8"),
                            BillId = new Guid("7b6231f6-2f13-408c-8af7-6c0a4fa2df39"),
                            Confirmed = true,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(824),
                            ItemId = new Guid("8b42dda2-edb8-4c37-b90b-1e60f52dc5bc"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769")
                        },
                        new
                        {
                            Id = new Guid("98b0e108-280b-4891-aff2-7f1988344b40"),
                            BillId = new Guid("7b6231f6-2f13-408c-8af7-6c0a4fa2df39"),
                            Confirmed = true,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(825),
                            ItemId = new Guid("3d36e22b-edea-44df-af8c-dc5f7666ec66"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 29, 913, DateTimeKind.Utc).AddTicks(8024),
                            Kids = false,
                            Password = "Bvwzy7wczFTgHY6sVANe6CBTJ85XXCjNPPqzJEnyWYdlVnaP6OElXjyh+EyYc8Q5TyJ6lvcH/JUonEyR+oBLFjrakCXoCIizS9G60yhcBkrfUxn9tUmy7uBcFPEzBdRXNPgES6czB9SvJnKO0dZIcKmkNJtyLFDrdtkFvHWgS5UdRSCVzjSQeDYqcDyWW7zlo2vCiNvcczoYY3SMZmX7zRPzApalFaHQV8MPjmgKkk0ktIcYCYmreIDb41ovxoOiajgieyFAchC+4bQRq2fWlpTvkJh2oPpczq0aHjVLAmFuxz2HT0UjWyBO/yCCSva05VCZ+ghJbo4rrEk5TvCRWcPa9oJq1JXeFg2Rjg/FLXyuVpKbn6X+pfEjk/cT6VC2R2YdOhtfVomjbgn2J3DiHN3fmDqz2CUFtpux0GAW2cvyaUhnqv3nrLcqJk6/ehi+3K/CrIte3mKXTz3YGM2UhhazMD5G8f/BCVKDCdfqn1R/XQpIVAwyxumWIJSjO0PRN1Mms90OAvxI5G0NN5vW/7LCD1n5J6gTVqg9L28ScIbONF8UU0v59TElwB6VGoQjVs/SkOPjrHaoGpGg7kTwnbbDZ8mtA44dLwwrL3VbGfPR3BOSxEtsurSM82u2RMGbXip4/ndrZa3FRzK4hNFaX9MKMgX2c1L+h389poQC3yc=",
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Salt = "03230db1-ff37-4650-9cae-893521ef7004",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 6, DateTimeKind.Utc).AddTicks(7945),
                            Kids = true,
                            Password = "izWCrnd9BcydfDgDcbrSgrI9wbbuWE0T9mPBMnUNkO/LdswNRRPUdcupB2DjuidxbrNcR/k8WbzCWZsyIPI1FhQQ+diUyxf4LzDsYBtI3S0wdqI80rxIbq2akord6d7EeMyZ3+/CP8u9sgU+C72MsmVvqcp6DQLYccQ4OWRi0JfXmvQD9erjNKQ0+1GXyQ2bFhiJmzjFQR6aYQWRRnngoL7bbKruFy7ghDvH4F6yojWvSWb4VtqeFn8Pisj6IjYQTezB61EbjSa06oHr6ef/+73Nr9i8KzBVuEi5jAf+4fU270J3z5MArSYOpjXDTobtzq2Wb4ilYmbgjvp3fQG+6CiZn579JPoNztI63FtwJSIUUdyBDkAEuDsRU9KGNDX8Jn7juRfL8lDZMlABeiwHSBnatJdeWihXB914AEQTBlpZjuQa7obhAr4aXjWo/S3ivrK6vMiey6hGS888en5eZh378TvzkiWXuQQ6ngFrovVPfveDxp+3XBRd5CRG/lywxHXGS2JG3XZL64gN90iGJYcZhmJOedUz8PkgOFkVhY4CJB/m+p+235gKkVWL9F8Xp/mFB8qCuQypStq+sFSDDn6rwdJOWbym8vriuEg0VMY4aRtH1GMe+J93vXB7aMDyMZpeWGANMvXyyw+KQxxYwuf7s4gpl/2w56gg1ZirdHU=",
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Salt = "b75e43fb-0473-4c86-9a69-f7406a0f2978",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be763bde-2f53-4c81-b2ab-12644b5d7530"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(734),
                            Number = 1,
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0effe521-b736-4875-9ea4-a15333554643"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(739),
                            Number = 2,
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("27e71bc0-5de6-4845-a49d-658eb9338dfb"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(741),
                            Number = 3,
                            RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("852304b2-69a4-4ac1-a969-9f0228928d89"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(743),
                            Number = 1,
                            RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e3fbf06d-1ac7-4ded-a634-7f47a4c66023"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 30, 7, DateTimeKind.Utc).AddTicks(744),
                            Number = 2,
                            RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("340c9065-f779-41b7-b252-c4c0555ea611"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 29, 658, DateTimeKind.Utc).AddTicks(1564),
                            Password = "wPf/IKBO3f56Fz8D1lfm+8PWT/aCIdx2fr4VZES8zuMR1THQ6yBvcXEe8f+YAY/kDd4SLk5Y22PxYbFcSRFO9UfJeMZV+sBiigwntCA43kmgJIk/2DzXY1hf4Waur14tgdSAckGDw1KStqLUViNM8h98MXZ6hCYvfIcyJ7LEI1GdDhqfwhlPPwsaqDaQftoWs1Mi2uHutSRUdoaSmQ9Q5QM0Phgswe8VSqwKHbDT3/LF51QrjDNlNZsuoLfHABqyC/q/lJGWv3T8Z6mUDQuMAY51gQgIBUzDTKRphrCcDjj1IK3m5YB2m184TWjv9k/eSrcDNoUTMahafHwIeXo239b8WsZ9gxn/PSO9NpJk5eCuMpLBkrtB04d1zydk1HRB/1eaZq0S6gO8hqiJ993spyDVFEv9gjVuXzCBXxCILkxlIK3BXKbS4pzvir5vnCc7eETNg1ep/uRU7aG4W0nf69Iw+w88UOtdEWBMasydFIhnizlL39Y8jJsZVcNvs2MmXZ9W6MFt8xSkAS2jobGVUGjhRZs+EUMHo96xhEdomq0jRHFNF27F6mtXL+UfvlJYFqcJxvhsivgKbMOFcDUDNiUNI+VJpjJJX/K5wT0h4Mf+Q1YQVa/NfHWIHg3Usbr39E/bPmb9UZnar3P3flo7iUAJQuA/6s5G4/rciT2BxNU=",
                            Salt = "2c4c8784-ef37-4076-8e3e-0778fee57269",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 29, 718, DateTimeKind.Utc).AddTicks(6165),
                            Password = "W6TVD/ZtxAJN/+5rUbJ8sxO8aqJCooReAwKppzpDVtOgbDmHH64FIG7HvcgZz96Wj7wuiNwGqk/T7tgEKoRWb4zwSVL4k3LyBBfGXMu3s58J4hoclhDFs/sF1ctz0fJ7YLNHqZjq/e7DNGew4lfNQ424lNPiI8u7pSOiytXRAUGSZgJ+swm6B7qw5a4/ZcNG7tvubI3p63qO3jVIWw+Sa977/y8Cw6jCA4MLhZuMLd9N6Byk6eWejuHeT/CIHdCZi4Z8igRYWSlJXc++ErUfRLPi0owWo4uIWu+Y1u6Lco6+vcSiFusm1zWVbveOlcs6jvSXzM7HROzNgnYbEueP45uAhUB/9DKDxMB2FhNeznpXGMpC/WO45VkzJXlTov1A0F54JqdbuucOlyfTd8NC0pGSE1BpYl3lpvCNKWNjQSC958XqvjZWLWBoPDeeLqSmwXK4smIdvJRMskNtI4MFlhUC8AxT0N/gktIK58vebdUrOhx4SYk1FqZGPBns05mgj5a/b6H+xpo0z6ttD19zu8PagxMM6aoR3I0hZ58QLEbaq3PT0RmVvWCeeG/oraaYQbCD4+nVrSy+GMyYxE3IVwqP/5dBssd3MtBs9nwipwcLD8LkjJB1f4dHPPBCtYQdoX1e1njcmDl5X/XFRWvZaon4ytfgHLzJuuGA564/u2o=",
                            Salt = "3a448eb0-3b0d-468d-a9b1-0ba743dc461e",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 42, 29, 820, DateTimeKind.Utc).AddTicks(5480),
                            Password = "O+FlnmOnfTIzY9XWTCPHh5Nh1Rva/4G0Za9XMMuzKR5JglBt2YlLVH2YAQAAHWfAG91nOwTtsUfiRVrX9x94ftAUhiFtvU3vVKLcr94Qey+r1ptMN2AO82jRJRakGpt+ND46dTZYH3MPYyulzx5K1lJNuMQhff3zB5GNtW6SRJmyBq1PBkjX0KfIMDUw9uLRJXxcV3JX+xBk68fC/mkTcQ6AGt3CchroTm/hGaO63SIYYIItR2seO9cNcMangdxj+Ax47CpJEtyG1rWfPTByovnYZnzkYhJPYpaBCeHkgF5lRyHjD/5RCaBfPashk/Isy836lh7tN6TpW26aG4UQ4nlG8Atvn9jQYLhY/tUHtBmo8TPDUCXjfheeL5VD9Pt6RP47NHmYX4SNDar7EDjfbLPZMFvMWg/H3Cbc6EaK1SFegBczmii+I9tzEDQCNd5mxu06+C3KpoQkelgQ1vB4VZ6I6l5QgKcweAML9OaAli9clGV/fsI3S/O71kK8+/9fKXK4xy/cZIb385hWGKJGf3hxL5PHxLdyj0IXKlM9HMdczO3fWVDloT+BSNfZjpJdXLRsmThYtRC9MCRg4QyMdbmo6NeVGM4IVCBcCHHwySBmWyspEB3IbaSCgbIm4NHLYfopjqLYEn24l+nSi5wg5Mzf/PX8DUCqjQ3q/a8iltM=",
                            Salt = "729884e0-c7f2-44ac-bde1-2ea7c0820991",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("64d2ffdd-9c0c-439d-bda0-720fcac75c30"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("bc74cffc-3b44-4c03-b7b8-772b84d6df1c"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("25c682e7-8772-49a6-8676-d9a5e26e4026"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("798d2b2a-ef46-4820-b5f2-deaa5c0e7fdc"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("14a36c28-d565-42b5-8c07-dc084fb3e6b2"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("798d2b2a-ef46-4820-b5f2-deaa5c0e7fdc"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("14a36c28-d565-42b5-8c07-dc084fb3e6b2"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("50680c4f-085f-4f4f-bc50-a6183894a707"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("87fa75e6-07a6-4853-b83d-36a39ae84868"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("04b8833d-fab2-4f49-8071-da89a5f42f1f"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("8b42dda2-edb8-4c37-b90b-1e60f52dc5bc"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("3af3bb48-78ad-44a4-b0f9-904e6168d73d"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("3d36e22b-edea-44df-af8c-dc5f7666ec66"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("4b6e5fac-f995-4426-b9bf-5ffae3f4ca25"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId");

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("9138c98f-829e-4791-aff8-c9b1ea9323e6"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("26ff2220-2ec3-48cf-b4bc-532148894f33"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("340c9065-f779-41b7-b252-c4c0555ea611"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                                    DDD = "85",
                                    PhoneNumber = "999174742"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("340c9065-f779-41b7-b252-c4c0555ea611"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                                    Value = "gabrielevaristovcp@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("340c9065-f779-41b7-b252-c4c0555ea611"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("38696f33-8b7c-403a-a76a-4f925de15769"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                },
                                new
                                {
                                    UserId = new Guid("f8a97c32-2e3f-4937-86ae-5e733f3f85e1"),
                                    FirstName = "Gabriel",
                                    LastName = "Evaristo"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
