// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230529045411_removeRolesAndAddLoginToRestaurant")]
    partial class removeRolesAndAddLoginToRestaurant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("861b4d46-b305-4d2e-a9cc-cab1d203747d"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6371),
                            Date = new DateTime(2023, 5, 30, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6363),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("14528916-e2ca-4a75-b111-9afd0074e91f"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6486),
                            Date = new DateTime(2023, 5, 31, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6485),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0274ea44-9895-4d76-82d9-88d21b80b4ee"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6532),
                            Date = new DateTime(2023, 6, 5, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6531),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66c22ca4-d6d9-44da-a5a9-72b63d6338f9"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6627),
                            Status = 1,
                            TableId = new Guid("75972842-354f-46ef-a806-48b48155fbff")
                        },
                        new
                        {
                            Id = new Guid("473cf64c-bed8-4b86-ade3-ec5c365a5d95"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6633),
                            Status = 1,
                            TableId = new Guid("2ae72198-e773-4767-a081-70263f5f7d1a")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("66c22ca4-d6d9-44da-a5a9-72b63d6338f9"),
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("66c22ca4-d6d9-44da-a5a9-72b63d6338f9"),
                            UserId = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                            Status = 0
                        },
                        new
                        {
                            BillId = new Guid("473cf64c-bed8-4b86-ade3-ec5c365a5d95"),
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("473cf64c-bed8-4b86-ade3-ec5c365a5d95"),
                            UserId = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ce0b2fd-de97-4793-8a3b-9a2023604184"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5298),
                            InitialDate = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5298),
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("10b92eec-b50f-4cf6-bfd8-a3b1cd5c9c5d"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5626),
                            InitialDate = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5626),
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5850),
                            InitialDate = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5850),
                            RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbcb7d4c-a446-4469-be56-86f1c83f2d2f"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(5973),
                            MenuId = new Guid("9ce0b2fd-de97-4793-8a3b-9a2023604184"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("0cf8ebf5-cc9a-4669-bb97-879a7eea264c"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6097),
                            MenuId = new Guid("10b92eec-b50f-4cf6-bfd8-a3b1cd5c9c5d"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("e05ce716-41d5-418d-adbd-0554d3e44aaa"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6145),
                            MenuId = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("b1cf6bb1-ee24-4fbd-bf5a-0e636a9671ae"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6201),
                            MenuId = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("08ce0d9b-7d57-4b13-a2d6-d61052e0f1ee"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6247),
                            MenuId = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("0452a8aa-94ba-4f78-84a0-e8a2a3713c12"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6301),
                            MenuId = new Guid("10b92eec-b50f-4cf6-bfd8-a3b1cd5c9c5d"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c9def27-c144-4967-a45e-126271310e0c"),
                            BillId = new Guid("66c22ca4-d6d9-44da-a5a9-72b63d6338f9"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6667),
                            ItemId = new Guid("cbcb7d4c-a446-4469-be56-86f1c83f2d2f"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79")
                        },
                        new
                        {
                            Id = new Guid("8b0ce6ea-f453-4a92-880d-6d3cb27260aa"),
                            BillId = new Guid("66c22ca4-d6d9-44da-a5a9-72b63d6338f9"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6673),
                            ItemId = new Guid("0cf8ebf5-cc9a-4669-bb97-879a7eea264c"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79")
                        },
                        new
                        {
                            Id = new Guid("148917dd-744e-4cd4-bc83-d375aef9ee84"),
                            BillId = new Guid("473cf64c-bed8-4b86-ade3-ec5c365a5d95"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6676),
                            ItemId = new Guid("e05ce716-41d5-418d-adbd-0554d3e44aaa"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79")
                        },
                        new
                        {
                            Id = new Guid("1507c5c8-7e4d-4172-8820-a3696121c534"),
                            BillId = new Guid("473cf64c-bed8-4b86-ade3-ec5c365a5d95"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6677),
                            ItemId = new Guid("08ce0d9b-7d57-4b13-a2d6-d61052e0f1ee"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 884, DateTimeKind.Utc).AddTicks(4991),
                            Kids = false,
                            Password = "fTIoWynRx+nGkJUkW/UDkW+9ck3FwwxUtlaya2QHj90tcAONVuVFfWza16hQEE1Ih8sE84dst8jXIZZdP/zXXpAfptCkTO2lHiLzjvJdIKwNKMjElNT8pxIU8wzd5hrXUU1f3SsxISEjEIQkCb9J9L4ue5CCpCOc7hlOtz6FBm0T+oTplKnQuMuoyEZcPDEhZuN2vffFK7RIuaaeSwZBDTwv2GrHeomtjdWZ1emh3fgGhrqpJAQqGPwNGMwkvs0/CuwgV6xQb7n6E5HrBafpwllOxtjWfc7BX+Py+OJ1Wg+ilKsKi68hh746B0wf9Ilz4WcyBibqMcwpSyZRRwtpaarSre2j2MLF4ZLebXfPCMbUijwN6Qoq3Gs/Od9yCllciE1eQts+C6qMKGuQum5ea24BlMzWLGzFN9JNAdoSZoG1bPcvNaSROxpp4LupyFasNoplrMO1QJG3/12f331vdFX3lP3PJv5gNp/bW7DCprUZV08yIc3zW2oRyc9ufTvexSmgy79Wu2bCJU2UknhXSP+VxN0LC5UQmp+u3Ik6fNbCT5M3XjOEMPjh8juDYd1tjQ9DQ28HMRVuyCJx0YZEZVCnPP2vH75PWU8gUVWCyv5ozRb5h/wJINxoi1AiqPx8wLl9lTXbAketXoGTqU1Ayf8vSyl3PbgjTQB4dBxTer0=",
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Salt = "ccc95a0a-5b26-428e-bad2-8205c5f8ed3c",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(4379),
                            Kids = true,
                            Password = "dzPLdPO66iDtDPTHIlQ0yp6Gig5De896frT7996p0obprqKgNn5L+DnRp7xUnSUrHzIveeuceGw4Qn6yWhnB4Q+4XMw7W9hc654l9pNhhyYgZgKP7VJZnB48pbG0pxwz0QJZyJ/IjnNZsiaG6LeMwzbuExJvfgqy+xiQVEP3408ZxKohVe8tKPSAjrqsdn/ay+G7fIv9QvXVK0VcQs6G87wW3Q59iDMeinGdQCmh+15k2kZF76Nm35tCozadVN3MoOisuK7+NXTZSh+GRE+UaJWmCwX07Tz3hIzGVPaDkBhYRrXOLhi1sY8pQcSOBrh2/+V+Pzh8ySX+kPoGmGzRjm89Y+oGumOJWbzTA6mKzQ5R1TCnYETFYkJSr4gsxlhqh848D25wqBpQnzszuMQ8Fd4XM+ZZ0auN6hdd7sa9lHiSoDZVAoaXdx7adgPC8J6tLNGtVyp8rvkxMtek7oupnjcURp7uGhNKKnEteCXQ5EN5+kMUPWzMjnuEEYxc2FYp1u/SLdJndIXzC1g9tF2HCCXEWe1ARn2HKdngwkJMx0GNNpo6Q8p/u3AnIp8Hmo5XQji/WayNmy6UJ/npFFQvYWwpVxKSBUqJtjSBAKfnuUMgaH2G4u1SFwoq27OpCOan8ypOKoOW7z8N0CNgsxZm5i+sbSZdiaJ94Y9K3EeKLLk=",
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Salt = "d99f757b-4489-495a-9110-ab43510d42d4",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75972842-354f-46ef-a806-48b48155fbff"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6591),
                            Number = 1,
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3c4573c2-d871-4910-bba9-69c381cc8838"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6601),
                            Number = 2,
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("507faae3-bdd3-41f9-b8ce-7f5fb04bca27"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6603),
                            Number = 3,
                            RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2ae72198-e773-4767-a081-70263f5f7d1a"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6605),
                            Number = 1,
                            RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("805075e5-55de-4c9d-8e21-325515d3bde0"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 965, DateTimeKind.Utc).AddTicks(6607),
                            Number = 2,
                            RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0672f946-b9eb-4293-8610-fca84d5837a2"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 628, DateTimeKind.Utc).AddTicks(2715),
                            Password = "Z3iGQmxVA4fJGv1L0BKBaEkdv70qqyBWRHVmpns/m7qSx1tK2Re80e+OIe1upUB2Cq6zRzw/nKcqoqJMgnJP21HyfuERhVuxEj/bHxKpJLWqKWQelqzMn3KEdqfxIigP/Cc/IDejGHaeyLccr07ATt5hjYSwWCX3mmBRo4jDqfuz+QCejMk4tDcpzj2jx6RRaoANZOyyR/jcng3n4LSRhbjd9Sg8DQ7MpDvMMBqO1uf16E6lGoURQEtJTgMCxkVjwFWCwxFGoEmKLm+gklF9GTaFVy4JP59cik8oVJm8n1piFCJx88ObRY8OldubwvqN2M3tmtuLGwKsGXgrSzHEG/dKZ4gLe30DEGr9fWf6nLZ8vnrPJS1dmqXQYE/x2/48915/XUVyfI0DE/WlL5vAAMeZU4tZ8hkvkizCMVLTed3qMx4D92IsNS/ZLiAj2pfJirSCkVko5L6H7pZn2SdkELX1L6BRrDgTJgw91ch8FySJDow8i+QdxK3KYWfYGneHLn2UwEk+WadBR7zlZ5U68H++6qiXrK7uEFbJrWQTZ4WVnMr2hzms8IRahOQKEb+F+JB0gJw4sXF0pW2KJRwjzqf5FHkSptHyt1dJyelIMXydRgCg7ZCMxBdawwRMXsCkAyv4GsiDg9g2qPc5jj1OuCHCWpQz33+UQvj8zmYAbNE=",
                            Salt = "dd477ae8-19b9-4d9c-a14d-187d85c77343",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 702, DateTimeKind.Utc).AddTicks(8846),
                            Password = "4oD8dCOTmtWWTfT9FzFXwPjHKYLL545RNDTymJCEQxeLGMQITU7oBbOux9fRKOPJisf1wguX4AdUV/dv5lQ2wuBxojEH8p8eUj/MuQX6okjMaQMX4zcDik2TRAgt5SKvlZJ0OFO3XCRrxLkVfM3hGox9w6SzHjKOVJ7i5mDRIqojB9upI5PG3y6JDHSiqGgpWFF61F9KmxFkw5UUS6VJ1x/PdGx6Ib7N03qmTvgc9CV6C0Qzm7Kl3CItiT/Iu2TGQHweGaHv2loHDUn4HOZ0f/vCIcqFtcJZ7DiaMYvpStxwkGtm5d926sI/2Om7cYANqU2ahalxVCorhnKbdUZTLzX/hkr7XA3Ps82+0ScG2ckr+7+tVO3AI5FBS72/6T700+e0qrpee732eUwXS8SPAMMeBW7aVoYTywcXCK0RAaQjOOCAqhY7p9B0qJhzOfoEKDmLYL1wXel6s9z5oeCRZgoV41MAHks6p8gLEABFbx9VKnHXS5X1zJCXwPae7LsxYL3pBxuG3S7wieeueZiob1b3pnOmWHcjL9KtIYhGOA1lNVM3+jIvmOg4DhZQvZSTQeURhxmijN9qBgZupOssrO3562rvMCijZTsPAEOH8fE0d28IP10Y0jQ3gGY2K//E5yhJKNEelPQfW20tSvW2uYLySW+hQhDzRYVCuYA9HUE=",
                            Salt = "bef7f6c7-e727-4562-bc9e-34980befe709",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                            CreatedAt = new DateTime(2023, 5, 29, 4, 54, 10, 786, DateTimeKind.Utc).AddTicks(5660),
                            Password = "iIlGpR5tjxqrsmTBFBa3y1BkoNg7M6Ewm9U5cEmAKTeToZ9vb0FxCtHoBbliQ3l5DTjYiQUoo9akujgm8Go9wWAUycRJLZ5dcQJcRz9EKRiVUmQu19BpwQVnj1Ks0pH5ypRZklgFV4ZLQhEbPDd094v5eguC/qju9lRX/d77722SgPAuKHRdtXux5kdK0ZoJrGyBvAaTD2VHEOcvR/vYE38KGxaHlglWps0d9VA9Xw194hEVXmZ3g2Uq13ZecJn5ekh5+IvM0bVwrIiM/RoqrutJmKQOWWHUseDtOdWbBGDZdgwUsQJxhE03+pF6IbWzRSbUzl9T43iVqO0KFvn5/tkOUElBLG+DSEzXedRBLOAxNfu5jzRe+KPg5s2GBV8EbPqc8zJS4x4l5zLSrqOTToO1O8pyKQaio0AJB47loLhMNWlix4nhN1gkhQCcrrScvh2cLWENN0jNlhmjPJ3nOGhaegWx77G9AwWdWCWeZTDpZn1khWjdVhcHHh6TNOuZtj738FVgSTTYCRQKC4e3r30ycVxAsrXntzYovKneDw7FtfVB7GFBcf+b5H+63OAi8RhrJzkpkxNlgz6IsCoz+Bc4wCHBnMXgvMXH0kcSwVIeEoDwaDOmZK6Qzh62YPE9yHViZT8ravmLQmiu1ZHz73d+ryp5GELswj/tEYpF/2Q=",
                            Salt = "43abd271-a615-45ee-a0a7-c8fd23a1bdf7",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("861b4d46-b305-4d2e-a9cc-cab1d203747d"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("14528916-e2ca-4a75-b111-9afd0074e91f"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("0274ea44-9895-4d76-82d9-88d21b80b4ee"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("9ce0b2fd-de97-4793-8a3b-9a2023604184"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("10b92eec-b50f-4cf6-bfd8-a3b1cd5c9c5d"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("9ce0b2fd-de97-4793-8a3b-9a2023604184"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("10b92eec-b50f-4cf6-bfd8-a3b1cd5c9c5d"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("7f060c4c-57f1-4280-8d52-4b6b4c86723f"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("cbcb7d4c-a446-4469-be56-86f1c83f2d2f"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("0cf8ebf5-cc9a-4669-bb97-879a7eea264c"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("e05ce716-41d5-418d-adbd-0554d3e44aaa"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("b1cf6bb1-ee24-4fbd-bf5a-0e636a9671ae"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("08ce0d9b-7d57-4b13-a2d6-d61052e0f1ee"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("0452a8aa-94ba-4f78-84a0-e8a2a3713c12"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId");

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("8bc27b6d-e518-4702-9880-4294fafbff41"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("1aba526e-8013-400b-9305-1999115da99a"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("0672f946-b9eb-4293-8610-fca84d5837a2"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                                    DDD = "85",
                                    PhoneNumber = "999174742"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("0672f946-b9eb-4293-8610-fca84d5837a2"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                                    Value = "gabrielevaristovcp@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("0672f946-b9eb-4293-8610-fca84d5837a2"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("c1a9d0bd-df87-4547-9663-2b74c457df79"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                },
                                new
                                {
                                    UserId = new Guid("e0564670-f479-44f6-b3a3-23dec0d2d6f7"),
                                    FirstName = "Gabriel",
                                    LastName = "Evaristo"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
