// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221121232016_nullable")]
    partial class nullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f8c5a1a-0a9f-4173-b150-1bb307106fd4"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3505),
                            Date = new DateTime(2022, 11, 22, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3501),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ddc0f969-fb67-4e79-9d2b-ccbf945c918d"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3594),
                            Date = new DateTime(2022, 11, 23, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3593),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2d803294-eaa2-42f9-924c-0e13da8fcfd9"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3649),
                            Date = new DateTime(2022, 11, 28, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3649),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03b7a2e8-4a52-4ef3-ae85-45045c6ec012"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2695),
                            InitialDate = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2694),
                            RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dc7a44a0-f7bb-4bce-8eeb-7f416f5857a4"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2838),
                            InitialDate = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2838),
                            RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3026),
                            InitialDate = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3026),
                            RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cefbe61d-678e-4d85-909b-44e4235c3e21"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3142),
                            MenuId = new Guid("03b7a2e8-4a52-4ef3-ae85-45045c6ec012"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("ad3a867d-843a-4362-9e5d-fa6b66ca4d90"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3232),
                            MenuId = new Guid("dc7a44a0-f7bb-4bce-8eeb-7f416f5857a4"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("6e431981-570d-4703-a43a-3c489dd8e15c"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3283),
                            MenuId = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("af426a4d-7cda-4b29-9de0-69c98738abef"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3337),
                            MenuId = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("d2f5f4ca-946f-48b9-855b-1a35245e6342"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3385),
                            MenuId = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("d52490d6-5e97-41b2-a70c-c9ee2f6d6b6f"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(3436),
                            MenuId = new Guid("dc7a44a0-f7bb-4bce-8eeb-7f416f5857a4"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2201),
                            Kids = false,
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(2504),
                            Kids = true,
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80c7a6d4-0739-4fb6-8d91-0baf648d035c"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 526, DateTimeKind.Utc).AddTicks(632),
                            Password = "kjejgNX9rMZ1lP7jGvkRnnl81kX80svyeMv0rDdoz6QPnDvJstXD2/ru1L1mJ7/Vv3i1VeFqP+A1LUPAZRa9GDT06N4w1YkSZgQEspueRbXgQFLnlbxi4d7y/HCy4B8VFVl7NRPhMtmbKfJ0TldBxDPAAdVz6G5WhUDWcciR/nJwBhlY9UPM0PfW1BFVkeG3CmnNaQoMEEmrq6EmuisA3yb0zHNG1o/CLeF8G0L9YXdQplglwCqSB6yjiXa5NBO8r6SqvQcbAuNhB+RQB3g42X27MhmdYKiikV4ZuT4WoURE5/agTaMwvrajC9Ar5tVocVqo3qI8Ac1TDl/g9yrcmcQh3Qwz6cALT1V2I2OfrJIkcY+Z4c2QfXz0HK4x/RKl8mTQx9k50AqLOQzkhzEo3y8j71qKIHx46WEQnQNEANluqfMh0tb0HY5TyTPlniP7w3eYiIdfc6GQUpcvqgc7msR/o+UGMWlAmX9k/3y/wy7xYL8etTpGMMEmujQ7j2/4vxhuUbKLFJDKZ/FVDOXNV4KHAsA0RSLH5DGJiFKPAzjm99hYlpQr5BvKcEJ9YaZ8q0qthYqXdwdLZ2zSLXpE6IAS8iu0rIq7nsKTKKWkOEx/286YDRM2lzQMwj6hqstfQhl5iHVxnJAv/K+MGACTpe7wSnXXANkKNnowf+oIgaM=",
                            Roles = 3,
                            Salt = "9de82ab9-7228-4d96-9bd4-27a9edde65df",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("77bfc02f-0b7f-4a56-8b47-21cfc4113665"),
                            CreatedAt = new DateTime(2022, 11, 21, 23, 20, 15, 579, DateTimeKind.Utc).AddTicks(1705),
                            Password = "03243HSESEiIaEDXhSVUb0KZrC2sfXsxy1KRy/+TOm0tJynhWzKMn9RQSaMbnsssCYyciQbLmj/VWdqCUryXwUcnEEN7yTdCid2MtoD0n14MGGEuxoqBwtkDkNKtH1LCvm8rcK3eK9/QF+oLx3Wopqrccewv3HlqKyE3Gr5eNDC4kfxltFBGcDeIihZjnrJAAO9tgVOuAcSL1yOOzgcJD7fqNRp/LieaNi0X3qNzlblVB3Naq5ts+ROni5fOEirzUJA8u/wwMREAe0ggHH2TxoYARV4yzPPeLE1cgz54J/TzMw9f92H4oIZHlL/ZMzDRqU6EFog3ZHPprDX2UEUvEUDpRPBHBvG+Y9pzbvXyW7skqEeo6Ki4s1X05mwB/mk4tfXrIs3egPRqzzPFbG2IxYafttoH0EUxUSaOt8m+Mlbz9H5Te+GfkoDz3XSC/3uCH9iR1Ud5v2baVZprKnCWgLAUIkUmWc5nSqBU7Dq+LS8UCsEGHs75CFFexMGszOvXTIv7YAs/JPmQ2IbRs4HOke8odoIPtmlUVxPQD/6+YddlbRZLvEh5ZUJEddrFFByLDCuFapEoRyrn0aHBJSjX9pXy/epDUp5jcvd3dSIaGAI1N/4fj5FBeYvsMJnHgz9AUzmtCYMe7dhvgIVQasu96u9KDjVmHjdqEprXm93r1PM=",
                            Roles = 1,
                            Salt = "0e45eaf0-22e3-4944-96d4-0d1ef6ac68d2",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("1f8c5a1a-0a9f-4173-b150-1bb307106fd4"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("ddc0f969-fb67-4e79-9d2b-ccbf945c918d"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("2d803294-eaa2-42f9-924c-0e13da8fcfd9"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("03b7a2e8-4a52-4ef3-ae85-45045c6ec012"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("dc7a44a0-f7bb-4bce-8eeb-7f416f5857a4"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("03b7a2e8-4a52-4ef3-ae85-45045c6ec012"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("dc7a44a0-f7bb-4bce-8eeb-7f416f5857a4"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("d8ea239a-16c7-4e5c-a1c1-c2c28225a302"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("cefbe61d-678e-4d85-909b-44e4235c3e21"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("ad3a867d-843a-4362-9e5d-fa6b66ca4d90"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("6e431981-570d-4703-a43a-3c489dd8e15c"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("af426a4d-7cda-4b29-9de0-69c98738abef"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("d2f5f4ca-946f-48b9-855b-1a35245e6342"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("d52490d6-5e97-41b2-a70c-c9ee2f6d6b6f"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("96ecbf25-0ab3-4d2a-b0d8-426eb62639fc"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("30267878-8fd7-42bd-9285-3f7ed8566d26"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("80c7a6d4-0739-4fb6-8d91-0baf648d035c"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("77bfc02f-0b7f-4a56-8b47-21cfc4113665"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("80c7a6d4-0739-4fb6-8d91-0baf648d035c"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("77bfc02f-0b7f-4a56-8b47-21cfc4113665"),
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("80c7a6d4-0739-4fb6-8d91-0baf648d035c"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("77bfc02f-0b7f-4a56-8b47-21cfc4113665"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
