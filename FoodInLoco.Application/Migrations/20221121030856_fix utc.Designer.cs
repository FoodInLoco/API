// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221121030856_fix utc")]
    partial class fixutc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CoverTax")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 11, 21, 0, 8, 56, 187, DateTimeKind.Local).AddTicks(8246));

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cb7bc6e-0967-43cd-b9b6-f0079ac8c2f0"),
                            InitialDate = new DateTime(2022, 11, 21, 0, 8, 56, 346, DateTimeKind.Local).AddTicks(9289),
                            RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("56fae501-79df-44f8-b354-1d8e25fb4c11"),
                            InitialDate = new DateTime(2022, 11, 21, 0, 8, 56, 346, DateTimeKind.Local).AddTicks(9615),
                            RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                            InitialDate = new DateTime(2022, 11, 21, 0, 8, 56, 347, DateTimeKind.Local).AddTicks(82),
                            RestaurantId = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b842079d-f0ab-4f32-ba21-59ab9cc371f0"),
                            MenuId = new Guid("2cb7bc6e-0967-43cd-b9b6-f0079ac8c2f0"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("eba6037c-2a99-4410-915c-ab5145a02a8c"),
                            MenuId = new Guid("56fae501-79df-44f8-b354-1d8e25fb4c11"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("ff92d56a-c9be-4489-9c7e-48f7485cb2ec"),
                            MenuId = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("cf8559da-40cc-4c22-ba61-97123725e441"),
                            MenuId = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("6aee3b72-2532-4b4d-a62f-d129f4c2ca05"),
                            MenuId = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("1f9d9151-a955-4e42-b120-59a528e5be99"),
                            MenuId = new Guid("56fae501-79df-44f8-b354-1d8e25fb4c11"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                            Kids = false,
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                            Kids = true,
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bec395fa-1dde-42a8-9820-204b9c68c4d2"),
                            Password = "kneeOJSM8tTQwEUlndMPoPt/N4wtMim734wrpA6AGRrS+wztaFdlAUmjD0R1uxcpVRcqhBCELPzhGFlNS9WtUPGpX1x4kZFBg1LXZWApw5upR0kBZrNtBIvZEnbSIUFhPIg1BYybLsJHjmpwRGClUrc+cVUXqN+S0pArjp+D/rijDhhAXvGFm7jlMQNlmFrkdo556Q1SdzYBrsGSZD5Ufx0jSiH1/S1KstYR0O9lCJG+6I3+3uQBuw+8bWZozyOyluv/ni2nOtTSSCZw7T63kH8qfPR86mowauLgp1NNFhzXyHRI4u61YoTrQQL1DmxEajWTJF2Z9h5wjnJAfm/Xmzu6VJTgeYcYdWTmA2Q6S7W4ouSjqVBiEjT31VFqW8DVOdBQSuIftOg/q2ac8wV2LA/4V84Krha+OshB5AX9b4HxJBbGV4dHtg5d2uYUzy7OKKBU6OCrMDhg8CdPLxLXMy7S1jUCJacjF6C8bDjYuDdJ0c+Fpuon9XTZIkaNc75JOo7hDXQaYW5XgtQdTUaw4zDWubAYkvkK+YWHop5C7QW4w7DKSB0D4CBYwYFyKqEvGmpCY4epE/1ZJeSOle8da+cp+naf4mUh6Br1t1AXloWmGxaarAiPxnuzRcceNunjzTlJZuAgcs7YDfqn7ranGPqJtSvQ9oK447e5nixLtdg=",
                            Roles = 3,
                            Salt = "a40a6f23-0f12-464d-9d0d-9b79f922208e",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("79ec73dd-a182-4924-ba9d-16005d681cf7"),
                            Password = "n2x5cZGxCakIq5NKhUuwxCaaxRO3hso0kh0DX7iiZN/s0HU9EK8RQ3bwAR5nFYAj814Zwybm+msaEy2XwsRZCFDgDI4COCj5O09TP82a6vUL+09NtFFd2mQCNqwy6qswumQjGbstirlY8JBDWhs0X0e7Mn2HIR10aXhcr2pMddfq578+a2TbcnH7raz35oJPw/UMmKveuZnolY5vZr/uOsEigZ94N0xcfFs2eQDwyl8F3d9cjNnIe+FrJI2dzc8BB6KqS4PAPhg9DsiFUpooxzqxyiQeb4BVUemE8oc7iyWZXln4QFKIOzWxRwacpoo1TJ5au+kfnMYKnasC7OD3kChUzUi/0DDKCLBPNYHiaaHO3xeJEyN//MpeK+J9Q3AY4kCC5iPKLQfyQRVVG039fwjJ/oBfJtPlSriFfhSl+WKCgAZ80ympoCli//CAaUFd9Q3sVzHB+9X6qskIZdmFKeHxz/NvW9m0aqpQ5CzrybqUiRMlcTmcmi0FeRFwOi1UerQ5xwdV/fvxHojGCmh5gJxJvrEBxvljq4jYxbv4nxjRgizlN48/mq2NbkVQIYT2GQohwlL78yemrfrxop8SWpP8ZEyJtNlN5TsXwnYtl3rwnQxbfthqG2AG22inhM4SAcBVw8JeUITwF5fgWNCsFdVrQo52j/3WxKEbej0VGBc=",
                            Roles = 1,
                            Salt = "1202335f-76de-45dc-a833-334d06914830",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("2cb7bc6e-0967-43cd-b9b6-f0079ac8c2f0"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("56fae501-79df-44f8-b354-1d8e25fb4c11"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uuid");

                            b1.Property<string>("EndAt")
                                .HasColumnType("text")
                                .HasColumnName("EndAt");

                            b1.Property<string>("StartAt")
                                .HasColumnType("text")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("2cb7bc6e-0967-43cd-b9b6-f0079ac8c2f0"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("56fae501-79df-44f8-b354-1d8e25fb4c11"),
                                    EndAt = "20:00",
                                    StartAt = "16:30",
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("b782fa8c-484a-4971-9b09-79e5563e5d8f"),
                                    EndAt = "20:00",
                                    StartAt = "16:30",
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("b842079d-f0ab-4f32-ba21-59ab9cc371f0"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("eba6037c-2a99-4410-915c-ab5145a02a8c"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("ff92d56a-c9be-4489-9c7e-48f7485cb2ec"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("cf8559da-40cc-4c22-ba61-97123725e441"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("6aee3b72-2532-4b4d-a62f-d129f4c2ca05"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("1f9d9151-a955-4e42-b120-59a528e5be99"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("faadc5f2-e5d4-4b2a-973b-b74f6f32f4e2"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("71ba77a6-9ea0-45c6-814c-75daeb3e84a8"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("bec395fa-1dde-42a8-9820-204b9c68c4d2"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("79ec73dd-a182-4924-ba9d-16005d681cf7"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("bec395fa-1dde-42a8-9820-204b9c68c4d2"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("79ec73dd-a182-4924-ba9d-16005d681cf7"),
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("bec395fa-1dde-42a8-9820-204b9c68c4d2"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("79ec73dd-a182-4924-ba9d-16005d681cf7"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
