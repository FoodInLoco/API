// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221024092256_atualiza auth")]
    partial class atualizaauth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Auth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long?>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Auth", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "AMBUbAtpVz8KgjjypcusZY5csFQvwdTEBs49fm8oqptFK2qDnVo8oTMVj+7t3jblUzzALYXy1jwqm0xGO0k0eJqlHb9EkqTQBSHQRWHgqR10Pu7xFQBHZU+78P/4exmbtR9Z24Gca+/n/d9Wk8SLHfE0+3GduNTIxhz/JfFISVKY22MmnpTk4OF6ja4jiLJwTvq2ZBLI1UwSJKJ7luf6cN06IbHDI+m4jLMfQ2+bUB3bARv37Bx2ZFwrMCcyrLq+JXTAVO1SbSXed85iAsuvCFUNiSifKzvLyB3f161nc/p7T7N3dlpJP9/B6Q79nrPcO/VbomzML9eQJEX2zESpN2CxgEsUjNFhOGj/CuirW0mzweoO6xiyiCydYJEvfa+7Y3FjPIu+BtYSFgLUYLJgMG7CCbX5zMG0pcSfzciAwYJH1CT/ZAFrj7Epa+sArpD+eS8M2aF7Iik9tLyWf2g4mjgu42tGzu+6E2RP54PFFZ7lu+36o4SnMrLTtTZAvDhOc4lt/6CHb6dWOsa37Yc5WQ39Cus8vQj4cqHyQ2Bg/1Ault/4eovlvMEVUoF3gJhsXqu5iHAg6L2I7zUCV5/hCMOICTjBaPL28PByw3XxZ919P8l5rHzMplDjnIHdClLxWUlCSoNE1n3xJs0h0j8URTohAN97VMNIohJrN9WVpLI=",
                            Roles = 3,
                            Salt = "ab4fa790-1ebd-4b65-a33b-0c8c5cbfbbd7"
                        },
                        new
                        {
                            Id = 2L,
                            Password = "sz6XQQpxdSbaBN6UPKSJXt9viQo4n1dwaciIDTlj2YgfgernIN6aeC13cjUijhRDCF3xejyLS/Xo4eU7TfQxllIJw57P/rkyV5iwmsisoEdnMGK1ru3DygJxX5iPAzl9jnUBdqSV+ORzQ7i8l8YMMaP2yhLcvXRO0oe/4HSM0wytdKg9V2Zr9q1fIBRSUfSOJN89j6CUxQC3MPmcDGQqPwS1LHqA7/9cZHmyLqVvY7ptNyJYf8WeJTmXXvo73dVTV4VB9vOUgBj9mj/PpSskpTuSXb3Pq/Q16un/lKCoKCMc3wVxxpZsic/s8uPC8sqgjJbMSNqt0MWEnSdxqyQcAgXUYNvKYufjUPB0reJ7cGW8gA+hntqNynz0icmzJiCeoq3GJ3tzETV8gMqbU1JRWjxv/8V02QCD8TrbYaA2ikuwwb+aRDFwIrK9qnKFDVVtFMa+PHVTh1je5uctubYWj4/fP2CIk3Loo7P8H1tu80Bohsby4735gWgYWTIktNI7oQmqF6Ep0Y25vDmbIHvn1+M4SwqD+mJ5Xxw5cKaGltwR5rIEzkgGSqM2qQK88vGQrYqjCvsC9w/eq8rjkhy/Iicwt2ueYbdapcrrfDBpF3/V5O2FjwRYLjy1TpSy+TuRwUYuot9AW+Tv78uBj8/M4v8qP/ZF1uwW4ALR65aQZtI=",
                            Roles = 4,
                            Salt = "e1460931-6535-41e0-b6de-4a7d86768c61"
                        },
                        new
                        {
                            Id = 3L,
                            Password = "gMz9ZdqfuJYjc4SmopC/g2seudzNeHmNZapn9J+gQqH5GdoLFsu35nZpEoqPXAGBDaTIUAEr8RjvhVUF2HhgIr56QwrzXeN0id3og9qAnIuOkmRjhDJg17xHWHBNlf2TaKoibyOObKsN8NzbgzwXfR8VLwXDot1ZG42Tf7zAGAv89nPZ3e008WokdjAvyJv4J8lJOY1oPu5VyK6cAn4CS/SpUndJMCaQvb4Qpf8Gqk8aHnsnFypyyHJEN5GA9Xq4bOxI/UoL9uG141fUfBDU0BBtEDzvx+KDW+UpDhLwfpUTrYBiWvuta/MCZFW+w0+JE+PkR9tYQlXPKzUH/+gSoxXqcUmeebti3Oq6FaF+GZ5RgNrs3MfCut18ivYaiiikuAfnGUt7UBWOGFOCCFKr+UxsOzCwkno+CqGSf3hQ9Ssc8rG80YVl4DdFKUbl7pRDl9L+qCNJtHq23Y/KUjuOQVvyBDoIBV0nwLqYbYLh1NUPXJDxCCoyBDNV4N4YZCIq5njncKCYd6+ccM2ZiZsElDGiOnmCA1xzF7El5VYpFN6IqIsfS81/mJ10BehEtDWIkjRwE/cjmrNVJNYZxVsEcljtEXEi2ShdEOmOg4ZUTMfF/WvuDS6l0TiqPu3BdzSEp8i1xUKX9efusG7tupIWCLY3UeqcHLTU0/xr3vXVCXQ=",
                            Roles = 1,
                            Salt = "5698c8b4-c81b-4e87-8201-b9363f24845b"
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 10, 24, 9, 22, 56, 87, DateTimeKind.Utc).AddTicks(1131));

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InitialDate = new DateTime(2022, 10, 24, 9, 22, 56, 264, DateTimeKind.Utc).AddTicks(4320),
                            RestaurantId = 1L
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique();

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MenuId = 1L,
                            Photo = "foto qualquer",
                            Quantity = 1,
                            Status = 1,
                            Value = 11.99
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 2L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            AuthId = 3L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Auth", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Auth", "RestaurantId");

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Auth", "UserId");

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("AuthId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("AuthId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Auth", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthId");

                            b1.HasData(
                                new
                                {
                                    AuthId = 1L,
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    AuthId = 2L,
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    AuthId = 3L,
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("EndAt")
                                .HasColumnType("integer")
                                .HasColumnName("EndAt");

                            b1.Property<int?>("StartAt")
                                .HasColumnType("integer")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Value = false
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuItemId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = 1L,
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Restaurant", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    Value = "mcdonalds@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.User", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = 2L,
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = 2L,
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    FirstName = "Pedro",
                                    LastName = "Oliveira"
                                },
                                new
                                {
                                    UserId = 2L,
                                    FirstName = "Pedro",
                                    LastName = "Lopes"
                                });
                        });

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
