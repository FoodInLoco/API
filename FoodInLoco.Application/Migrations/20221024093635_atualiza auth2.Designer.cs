// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221024093635_atualiza auth2")]
    partial class atualizaauth2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Auth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Auth", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "Apz3ywvGJr3DWaZAzbytc/D59NaNXYJ3Ewxj/Ck0U8y+AGv7hdG13rmW7UAaziYn1Qxf/vZEHZE0a2wIrSg1gMjWaKyHB83N5dwO1MohIQSA774u1tgWGHiMz3X/uBNiuDV5q1v8/TbeuM8rThtnx49+gOP+Cmuh/DTwceyAYov4g3gLEa0RU93YAUvv+RvbjQBnd6JkRt5EfZUKFOfFnvenssvMQZJPynkjKqGJUDgI3pu7IF4s5cFP+fuaRclSGDzWZ+Itc48+PE/HvHLW72vpHtcJNUf7i6I5OkB+vs6I+irFMXdUoXTPsy1ES3XROzKPqIGnWjC++8k4oTFFL+s2Ha1+pZs/e0NAEuCvaecp8PlItC5RYi6W1lbH0AZt8wwtisvBtzcQOl9DNSQ168hGLgpq0Yo+pIcr2EmKzQrvdtjJz/CPFi0NjBDl6yqyvYtA5cyHBM2vmd2A5C4dgJU3hp9xVis87q+XJ++tbmwft4z8veLXOZ0iM/EAbLrGe9/C70TCCP3uWctObWrLQtZk/igMxHZvzUf8RNM5UGTkA0+lGHwlxxNpw9fSe4RPnTurMH92KXlpNQj28nBTBj0DaAM+pAVOu4sXW5iPzKM7f+uu+I9z4MGEqAVNfaFJ462F85+FpTobIj7t3NfhRX31SRS5kxW0hjdKEeupK8U=",
                            Roles = 3,
                            Salt = "9ae56778-e666-4213-8148-97a49d2cf6cc"
                        },
                        new
                        {
                            Id = 2L,
                            Password = "LZdig9kMTMqgi3wMfInSQ57qDoedBvF6sxy5AYbzdiO6GVTmVcDEUzSnwK23PUvtNB4iKFNKMcbuL1fYI/IIEZLuIuB3gZYtryk39cmnihjQJgqb4vLpWGiqjnRNt7xJ6zZ7joJYZEkkk3hEFN8aUk3gdOVZcgKLAteToVxtJT1X4Ejk2Sx3zwD8hsEcwxwzysfS/anT3clbe/+Fxg1OhWfwzDsofTYyzv3hBkk4kvn0DaKQt4+2tVH3Mbh4cJvCcEkHFYcw03VlYdBhh4kILGrPkBIcC6v7VwrKYP/hbesW/MLSA4h+TgiZbyU7PqPf++nHaZNZh5jNLyXq0Sdy98lfLYrhyqnBZ7aLcO+8jB9AyzMiiAkbj479R96X+dWiVTQ1d+b+fOoiAp7bYRSnbAa6yIJraXlW61DpTQlEFGAM+ajTSgUFSF98Qf9mACQPmfElssio/czFQLkOMzbFqyA/nc+ZMBSlhZT3vkvy7m2GyckJHYQl2gJN3FjBvF3fHC1zwGN1yHRppkfHRojbQ27LZMQaAvBzV19M7ObN87/tFjjRg7ed5XnI93SKv5kAi057smmBn1iX16Xbf0WREIs2g7+b9/EiVW5eTM/LRSy7j+yklTbdyzQoYiQ35MDy4pnwiK5id+BGbS6u3YcRGHVNofUPuwGGIG7oMUluc04=",
                            Roles = 4,
                            Salt = "531136f7-560d-46b8-a390-e7e282711ae9"
                        },
                        new
                        {
                            Id = 3L,
                            Password = "9ug2Ysb+hAwZWZ/C4B39pA54o0cO7Y8GJQvwtgR7txevrfvpwkpgUVZzdInXsrYV4sFOzDTTpSZTibOeu7e9eoORj+5W2Zjcir6ChpcauXuXphfiICewa686PIW+ZrhXOcCRZ47m0AOCZdckHKfq5AliKF/TkYQTh+Xqot/xRLdCUfChRGsmKa+23/bGE8URg+zGFLS3ssXyXt3Q0GfULEojZvOumv4aMQUUbTiqfbvbqRfTd4fSwftMaCnPd9OB/IpVg/gDce8IkboHWKtQcii39b8xLMmXP1qsg3yJt19KZb5k4rs0PUbrmWhlb/TXEbUyDxXR2enxRCel/r4ooyt6Cyl0KpS7AMVBpiW3SwE5JmoZdDWa0czRpkVtd8KM6MR6WnnM5MSquPqzJUeTg1pTh6o7FS21yhn86sOFm4ryZ2iBIiJ5r2QMGhNotc9q57QO+Ks8O+jW4N+TTgZnjmh3dK7MOBu+0lcARxt+FSWMNmN9Z3CAp9fOs5LElzJYm9Zg+ofA8UdYUEToqQmprpHXCAFSFFEuQlcW/PpQPRrh1o0OlTFhZoKaBxuintCzNBgh1bbh+laBmUhAkuvYuYU4hzcT8gXt2qO2os/JP+muldxLsrf5J4IEPmNMQdEqUWYtPTYs2T0kEhD9e/+WY7eH8pCMsnEmusW5t3kvrfw=",
                            Roles = 1,
                            Salt = "74ce8592-b31d-42cc-b50a-e5c80b14a173"
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2022, 10, 24, 9, 36, 35, 327, DateTimeKind.Utc).AddTicks(1405));

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InitialDate = new DateTime(2022, 10, 24, 9, 36, 35, 504, DateTimeKind.Utc).AddTicks(458),
                            RestaurantId = 1L
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique();

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MenuId = 1L,
                            Photo = "foto qualquer",
                            Quantity = 1,
                            Status = 1,
                            Value = 11.99
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 2L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            AuthId = 3L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Auth", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("AuthId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("AuthId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Auth", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthId");

                            b1.HasData(
                                new
                                {
                                    AuthId = 1L,
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    AuthId = 2L,
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    AuthId = 3L,
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<long>("MenuId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("EndAt")
                                .HasColumnType("integer")
                                .HasColumnName("EndAt");

                            b1.Property<int?>("StartAt")
                                .HasColumnType("integer")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = 1L,
                                    Value = false
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<long>("MenuItemId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = 1L,
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Restaurant", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    Value = "mcdonalds@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<long>("RestaurantId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1L,
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Auth", "Auth")
                        .WithOne()
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.User", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = 2L,
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = 2L,
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    FirstName = "Pedro",
                                    LastName = "Oliveira"
                                },
                                new
                                {
                                    UserId = 2L,
                                    FirstName = "Pedro",
                                    LastName = "Lopes"
                                });
                        });

                    b.Navigation("Auth");

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
