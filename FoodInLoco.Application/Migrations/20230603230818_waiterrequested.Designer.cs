// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230603230818_waiterrequested")]
    partial class waiterrequested
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eefaa96f-e1af-4d38-aed3-a0883511a84f"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4692),
                            Date = new DateTime(2023, 6, 4, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4684),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4ad20295-e048-4364-88ee-9781d4283589"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4889),
                            Date = new DateTime(2023, 6, 5, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4887),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4de7a682-b70e-4e36-b62d-cdd24fe2c8ab"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4966),
                            Date = new DateTime(2023, 6, 10, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4965),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WaiterRequested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eadeb53-64d9-4d67-82eb-7156a6d50e73"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5106),
                            Status = 1,
                            TableId = new Guid("11bd8eb9-8841-4f73-9d1e-a9d475ca62fc")
                        },
                        new
                        {
                            Id = new Guid("4a3a0162-b07a-4c84-abe7-d62bf677f971"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5116),
                            Status = 1,
                            TableId = new Guid("f115e682-0d54-4b5c-bf8f-686d47df9c2e")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("2eadeb53-64d9-4d67-82eb-7156a6d50e73"),
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("2eadeb53-64d9-4d67-82eb-7156a6d50e73"),
                            UserId = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                            Status = 0
                        },
                        new
                        {
                            BillId = new Guid("4a3a0162-b07a-4c84-abe7-d62bf677f971"),
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("4a3a0162-b07a-4c84-abe7-d62bf677f971"),
                            UserId = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76b0c3b2-cdf0-42ed-b142-5c47c5405374"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3076),
                            InitialDate = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3076),
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("eb33aec9-d62a-46fc-967e-474d2526fc51"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3602),
                            InitialDate = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3602),
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3912),
                            InitialDate = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(3912),
                            RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ff17ad9-5aae-4d9f-930f-1810488a68dd"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4105),
                            MenuId = new Guid("76b0c3b2-cdf0-42ed-b142-5c47c5405374"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("826e73a0-306f-40bb-89a7-47dd193ec83d"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4303),
                            MenuId = new Guid("eb33aec9-d62a-46fc-967e-474d2526fc51"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("6bd692b7-4ce9-4dcf-9291-3ce0a904ff0d"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4372),
                            MenuId = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("d9d65371-5e8e-4ec9-9936-a5e0df7fe2ae"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4438),
                            MenuId = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("9f5635e5-0b1f-443a-b96d-cac914f6c3e8"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4519),
                            MenuId = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("60e974e1-55cb-4cb6-ba6c-dbb8e345d6ed"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(4602),
                            MenuId = new Guid("eb33aec9-d62a-46fc-967e-474d2526fc51"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fc2b223-cb37-4a15-8591-5972de90ffcf"),
                            BillId = new Guid("2eadeb53-64d9-4d67-82eb-7156a6d50e73"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5172),
                            ItemId = new Guid("1ff17ad9-5aae-4d9f-930f-1810488a68dd"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443")
                        },
                        new
                        {
                            Id = new Guid("bbc6fbee-3323-43c8-a515-116a9aaeedb3"),
                            BillId = new Guid("2eadeb53-64d9-4d67-82eb-7156a6d50e73"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5179),
                            ItemId = new Guid("826e73a0-306f-40bb-89a7-47dd193ec83d"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443")
                        },
                        new
                        {
                            Id = new Guid("1332e512-7fd2-4a69-b842-4c08b296ee21"),
                            BillId = new Guid("4a3a0162-b07a-4c84-abe7-d62bf677f971"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5182),
                            ItemId = new Guid("6bd692b7-4ce9-4dcf-9291-3ce0a904ff0d"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443")
                        },
                        new
                        {
                            Id = new Guid("c3232a67-5e3a-40e4-835f-59543ad221ec"),
                            BillId = new Guid("4a3a0162-b07a-4c84-abe7-d62bf677f971"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5184),
                            ItemId = new Guid("9f5635e5-0b1f-443a-b96d-cac914f6c3e8"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 436, DateTimeKind.Utc).AddTicks(5279),
                            Kids = false,
                            Password = "cxx5nuEQi5vOlXoicE3BIknQREeHWC6wxtDpoe+3JC55GXEqES9sUgqcebe0Fa21Ah6Qvjh2tyYs6UqfZy/X5mib8MK3BKdIrCSwG+xFO4sFATvF2eEBa7/ualJUhv+LlwuRUlUiIkck92OfxWkL8laB7WxEcJ8KR+cTvancY23SJrOy4sCoi7wgx2Wta5LxpbaDu7xEeVci5n5YlgXOYPJPnHO1oU8LeZNRDU2O4QNgvywSHLNGLWgaR3VU7JiDqiJ2J6+IOoVKNMlOMRok/+nBF2fQUlsvSVUv4lmdosCfc+87+id4WoSTSWWjka4mLqWu9/xjQUIwQFPazbtPp2HN7L7GiNP+J+nUcitb69fXOKKObeBX4IW86UiFho27ghh/EV81emuQOzQPeum55Zhuqs/5W4AgLsfzCq7oBY5DlAO3CIs+yVcNfpm4xtjcIC5nOAmry4p8ZWW3n7WA6CmElT2mrGVEP6/sBoReCDY9viDEw4kGNC6jGLuMpD7OGGjbMMGJoxHktnzXMVM270o1StPB7qahWYzfxBG36AhFSDBXO/smpkRclV3xmmtUCGXYEAeAezeMN5p0IV0XROiuHf+eke8pcVvV+j3SKKuZXwZBdLOIodIrp4UZJjeuOQ+muVR/XCFuIp8DFo/7l56vACtWpkmHoMN455JrYDg=",
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Salt = "7fc569b6-b6dc-45b2-80e5-908e01a5d126",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(1868),
                            Kids = true,
                            Password = "Mu2mnV8I+Ex/cLvAxFDuxrk/ntjP9+WE/y4mt3CWhkf7Al8ZdJ/t9qVJbo0aHwCFQQOGzDGwMX6+IeT/KwAShouQu+oYns6rK/rvZSYZ5P9+cxJRzvxAsxyjY2TJRCGDkYyRWokxIwitAJhe4M4r4AiXT88nQvk9bo2MJhs4c+Y1j1+0y1tR35RLZhAsWwJtSrlYqdxkkO2U17WgKU+p61wW2d36gGBNkPYNAMY5GWloBAl7Y3njnimDG3KrVHltYsnedOcCFHYi1CyoUqjmGt44yyvU0FEtZVzrcFJOdcOW12AKci4RStTFtWQPr1ZCM9Uff3dBRopb+nEccNUMRe0a9sKpHg6cKhAjy+cmm3KueVBJMb9SrPIHFEr+RtwC+ghnqZF397DSrt992LwnrCpAcBt6bCdFYwhG8WyNaB71GgUDoI7KYtQxecyF8iSI8vUoqCPIdiry8BXuA2GhX7Czpzji+kZPAsMVyq5Lr2zx2SNmcb4k0z0rgvQ1rFbycKqHgarwWpaOZMMp82ig94gPYQsi95ah+0atAucDh+EBR7iVaAtpZ27nIBwLszgMmVVj8DNBmFW5hjIndgYWdQs9FaZkpnaN0V7/6nWkuTytilR8RzYW53TsS9a40UvQwB09GINqW3nCwP9ZqOZRNzgyd+zwHcbD6znqiTcJMBE=",
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Salt = "72ebe5b8-502d-4133-8d88-bcca8293cfe6",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11bd8eb9-8841-4f73-9d1e-a9d475ca62fc"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5062),
                            Number = 1,
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("62ca422a-9abe-41ec-a017-8f7bebfc46e9"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5073),
                            Number = 2,
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("08b3b603-2ec4-40ae-ade4-582a046c6a54"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5076),
                            Number = 3,
                            RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f115e682-0d54-4b5c-bf8f-686d47df9c2e"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5078),
                            Number = 1,
                            RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6ba9b143-7edb-48b7-8ce5-d9bd8db68ba3"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 523, DateTimeKind.Utc).AddTicks(5081),
                            Number = 2,
                            RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47729b55-fd05-4608-9c8f-29888bdf73dc"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 175, DateTimeKind.Utc).AddTicks(8855),
                            Password = "SjwuL8PGogXfDPuOu9s4Kri+BDSahdWMad/RslzCHwOBK7Y14155ZUv8r+ny8lCHgU+sFAhdf7tqf28mwn2kDxl9SyqdpzKWys/SadknEAQqXK7qYdINNpUlV7t1tuP01dq35T2bcjv/exgoV3QC0y8531z+U4Et8SGQDZ5iqhdatdgIAqZjcIsKYxy/q72jHAzgzjae3qol+1mziFKa1XNfeppsWPzeRY+tQF99WAlIoRLQQMw6hJY7E40VMI5YYIB0gvdxiPa1VuBY6eYt7dAEaqyP4lliIfU95hWoejLmCUUjGTmCqmbrDWj55iPkOXZ3zz4y2/jH89LCWTAXXu7g3evQhZQInxdDPMi5uzT4I/fevl8vF9emAQWkjs2I9b0dGX3//4j3ZMUn+Nna7rOEEK5d9HH7ucBAhIy6wk1YRuNajvO759DufnYjuTCFFR7TzGsDO11NlXionMPOAwZc5d0RzB2tub+s76Kz49F7T/kTdlwRRrvcVNCqMIzHmyQiuKE1dUCFV2emZBxiYOzBKM1yDWsvTXPVO/qU/lFzGvg8HcAJ65F/B7OIN4pse+sqapHRMBKodGGIO0lWdv/uOknS1wex/4aS8BPTQw+3WUPcbOq+cVMd4OJKOtRLe5N3rkZ3lgyW13E7kPJCNtTSQ/iUE8nsdTbbb4KA3HU=",
                            Salt = "a9ac9bcd-a4a9-4cf3-a807-8749458c5003",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 259, DateTimeKind.Utc).AddTicks(3048),
                            Password = "dI8De0r3gQIlNfu5pgAVNpWRPVRhGF6MIwtd3s4r9eGpkcdoor6qKJq/w3J0UK2OAWoYxXu5IDtm2wVy38vSuD/H6KwQe6XEtrL55WQQ55bPx7I/NUWQ1p4r162Y8lw6opGKM285HgFSt+eDfhYg0F4TqqalVxssVPGMSn5ztgBI+enKuxtfVSD+r938AgK31qzElzrw+te6jZWtR3P/6vA6nhNZg9wCRpEr5W/qnJ2UGVtJQ4eyr7WGjP6EkU4mLkhtpWJTBb5ZpUvqGKtEKl1dq9cqsK0nbtVdCFEKFQ04vLJD0/qmH/f4XoeDfCffgfhB5hriE8QoTAkY7l4vooZsXN4gt4Bjznd5TdiwSa5zopgvSVQLUzt1d2EKnT9KS2wMw9XDImyVqRu7sWfuOfKnrvdt7PgsV//yy+VZ6KjafHzw/JjQA2zBHmTLRNwcQB6PDY5Yswu4Tj2h9nysM1udZS3BH2WmpQTKmdNVB4VjBwoYvVRrsGR+MYgseDblztH5EzwVVu2JttMX4U12dCmpPI/aPTQBYDErm0GEHIJ6Yq9BkaoJDYL0oQ8yHP2uI39EsBh3LU0yo+4ZiTnFQVufWI8Cw1QZsPUDhja6sZeZxFX7dUL+q1Pq21Q1U9D2/+eg/29pDL9rcuXVr94+PVwZNxOMgRvqzr4kvzePrrk=",
                            Salt = "e48b24e2-df1c-4479-9916-1177aaec8496",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                            CreatedAt = new DateTime(2023, 6, 3, 23, 8, 17, 346, DateTimeKind.Utc).AddTicks(178),
                            Password = "fdbLpVqPq6tAf06qzvsv+Bmmex6TtLxUCeyJgCATYYi/jX2DcCMucN/6RxsFkoUwTeSH3I7o4aj1mQFu/eHkmNVTPAE606brTdZnEn+wwkMQ8ufMZ9zRMP7j3N4NqPGQ815cIeVNaq1jdRb9BwXLjjUq4RXiGT05mUEdqmJP7gipwtX4GGXGZPkKcVBGichfHzWtQdtUGeTv/1LB/TqAVmdZr8Q53C1/yetgCbo/YV5segG03uGpPNrvQZj7sndN1tEDNHmzogXc7yNikTGdgN2mza/0Ody8ENtifAhgu1Kb2yIO3v6xWJLH7JU+4tUJkKA1R6XwB88VZW+PbhEnaLCNfIXurY4veYLQl6XJHcL5e9h5Z9AYAHbbOuMD42iBFqMrCeRQvbKDE0XsmrBF9B1iI3KdYz1x9eipVoTwOm1Qab2ys5K+EKgZBc7niSwkjTWDnjDel3USpGmc3WTqKaWdRv64+rFfkfV7yZ1jidzNDT+WUMfoVU81hpofLV1IT627E/64XxlXyU3gu9KL+AxTGX6LMKJU8t87DSH0x9qX42B1Elt50x7Nv7Il3W8qqmBSR/btP/5YxQ+MzypGIp6bwTFSWdVeRXwWkFVQgKsDuVwirkA4HvdoT9RLCoYx5AC4ibt14/DEqWJ+Ra+gNDHSl6QUEBGlNgYD/5cRR0Q=",
                            Salt = "44421434-5dad-4f14-bd61-a6517c578ff1",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("eefaa96f-e1af-4d38-aed3-a0883511a84f"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("4ad20295-e048-4364-88ee-9781d4283589"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("4de7a682-b70e-4e36-b62d-cdd24fe2c8ab"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("76b0c3b2-cdf0-42ed-b142-5c47c5405374"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("eb33aec9-d62a-46fc-967e-474d2526fc51"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("76b0c3b2-cdf0-42ed-b142-5c47c5405374"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("eb33aec9-d62a-46fc-967e-474d2526fc51"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("a10248fe-1735-4440-8ee1-9886924c1fb5"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("1ff17ad9-5aae-4d9f-930f-1810488a68dd"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("826e73a0-306f-40bb-89a7-47dd193ec83d"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("6bd692b7-4ce9-4dcf-9291-3ce0a904ff0d"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("d9d65371-5e8e-4ec9-9936-a5e0df7fe2ae"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("9f5635e5-0b1f-443a-b96d-cac914f6c3e8"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("60e974e1-55cb-4cb6-ba6c-dbb8e345d6ed"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId");

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("34d11be2-5678-49ab-898c-48bd072df432"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("d6ba4110-a03b-4f0b-9891-e8243e49955d"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("47729b55-fd05-4608-9c8f-29888bdf73dc"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                                    DDD = "85",
                                    PhoneNumber = "999174742"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("47729b55-fd05-4608-9c8f-29888bdf73dc"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                                    Value = "gabrielevaristovcp@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("47729b55-fd05-4608-9c8f-29888bdf73dc"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("209c736c-9759-44ed-9cde-61e17f287443"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                },
                                new
                                {
                                    UserId = new Guid("b682d3ca-657a-4632-be6e-84f9e98a1b48"),
                                    FirstName = "Gabriel",
                                    LastName = "Evaristo"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
