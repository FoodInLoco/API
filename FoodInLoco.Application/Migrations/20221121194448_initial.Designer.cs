// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221121194448_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("CoverTax")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4541697a-751d-4db8-b200-8a53e9255c22"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            InitialDate = new DateOnly(2022, 11, 21),
                            RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a772cc9e-33a4-49c3-a62d-8daccd9eb11c"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            InitialDate = new DateOnly(2022, 11, 21),
                            RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            InitialDate = new DateOnly(2022, 11, 21),
                            RestaurantId = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d4632a1-a97b-4f74-b247-7a2752dfc185"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("4541697a-751d-4db8-b200-8a53e9255c22"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("b9d9a561-c800-4f7f-87a5-5fec97da4454"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("a772cc9e-33a4-49c3-a62d-8daccd9eb11c"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("ee397303-d6a7-44fa-9b95-919ed326eb23"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("f8e02a72-9011-4e50-9a15-a629e6714f65"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("e0ad94e8-916e-4998-8ae6-b9053f785517"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("6beed666-f12d-4c74-b104-dea4acab16f4"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            MenuId = new Guid("a772cc9e-33a4-49c3-a62d-8daccd9eb11c"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            Kids = false,
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            Kids = true,
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("LastUpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("363c028c-631a-46ba-9ee4-fc6d207c32e2"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            Password = "Qm3WMdHEyOaaKsUIM24yxSW/w0mwyTYbfgTbNti68O1QZcjXJUVuXvPQ3akXroglxF2cDvSrIUN69wJnDUvWkBuKKhzElumBIlhZidFfx4oPNEuxC25wPVZnKQOpIz6CyuoEhhgM63IFk899gCIpYQ1P1afl1p+8WHA2jfdrYfFdh6CCb+/0tXcHclTTWbqtJMWYrBXLKg05IOLbIZB0KyZmd1bQNKrv+kaLgypva2o2xBUG4CX+JNjfKU358qbIWEUdiG2H0PCBowjfOVqmMhD++nJ9vV1YJUm4vZ4WA8S5TBTqiW9nC8WDrGh12Gco9Y2amaVIjqX10EiITifhXE7JInG/juoUq1DTlwf8HTpPFNf4sWhIqhiZlGOc+maXjNuv4pQkaoIAsSzs9utCJfRkJAmy7+QOn2G6W7psx5N1D/Ao8PmlCZ6j5uZTRWr9kC2lm4SBZtdUdavBq3ioyw1mJ5ZV7wCMdby5/NdCG/5TD5COo1Ck+8sUmy1hA+TEDWOL1kSk84fPxTgGM5fNuJLXOXhRnax15Z4V4fR4ImIHUFbzmcbrt/2UuCRu8BU37q5xl+KxP64VYagQ7TXiMPzaM8eCdEDadN/BuKasfqN7RHD/yYHFT6Ag2jYVFhF7BeV3Js+reawvoQwcM2adXpTgoUUtYXZarS+2ujejZSQ=",
                            Roles = 3,
                            Salt = "7b1ad173-0e7f-4382-ada8-30379af0048d",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("01ee2e8e-609e-4234-88e9-85787e9a332f"),
                            CreatedAt = new DateOnly(2022, 11, 21),
                            Password = "O3o1Y/ISydCnCHzuE0Ls1tJ8nLSKiic/ySc5f8k6NEyDIB6RI2Ceo4rRv7K/bgbShXVODF8pr5WgOmqwlKW6fpKbfMbB1sOn9vlGJA3pzq++er9ZUtdxTsM7TaH0nt6VmVa+amzABVlD2XHLbTELWTX1sRLRX8Wp5RERovH1J0L/TL2zEjUpWxALmQZeeRnA7i3mTDdv8FVOxuBVJFNMTDYC7dN7KSs5m8+TznCPIirqOblvfnlwpZ+sMvyXSCZ1beC+usTxqE7c9vTRersInHboefSSEa4oUg7LdBPzmIzja4J+SM10hdPOpyjCdh5AebuZsgmNO7J5KI/pXciulTRUjdWplUqvTqahjaqeq8oW/nkWD1Mz/pzhf8sICtFNq4tw61iQg6/ylLhdJLp4wtrLmKPOz4Cbj3IkbwQg3CTHs5FnEe9f9RvImgFvH6st3mf31+u33ozuEANbASaL/m1lPzDxQfVaF1anAD3jPAFC/L/ovX18APtsOaZbxUXBBYocfWy65o+8bsnkE7qGVZZBJBMYbfzRviZQoLjk3TN2Zwg2+jYksq4G4FE0hAVMlgZzB0yPRiYVGiWDgjd2piNqrE4NNFENknhiRC4BFJ8XP/9UOSZwxNuZsKhWZWSRmA4cA683GgUBxmr3gZFd3zT1a4VLP9fKiNvyyhE2S/o=",
                            Roles = 1,
                            Salt = "5786bacb-527c-4239-9204-5c8a770146ad",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("4541697a-751d-4db8-b200-8a53e9255c22"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("a772cc9e-33a4-49c3-a62d-8daccd9eb11c"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("4541697a-751d-4db8-b200-8a53e9255c22"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("a772cc9e-33a4-49c3-a62d-8daccd9eb11c"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("bbbb0da8-5e4d-4400-b308-45b564303021"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("6d4632a1-a97b-4f74-b247-7a2752dfc185"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("b9d9a561-c800-4f7f-87a5-5fec97da4454"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("ee397303-d6a7-44fa-9b95-919ed326eb23"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("f8e02a72-9011-4e50-9a15-a629e6714f65"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("e0ad94e8-916e-4998-8ae6-b9053f785517"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("6beed666-f12d-4c74-b104-dea4acab16f4"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e51a73e2-73cb-4f49-b112-ea3ea250beae"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("9be02aa5-f544-4cd5-b0c8-361ce5288004"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("363c028c-631a-46ba-9ee4-fc6d207c32e2"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("01ee2e8e-609e-4234-88e9-85787e9a332f"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("363c028c-631a-46ba-9ee4-fc6d207c32e2"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("01ee2e8e-609e-4234-88e9-85787e9a332f"),
                                    Value = "letter.pedro@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("363c028c-631a-46ba-9ee4-fc6d207c32e2"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("01ee2e8e-609e-4234-88e9-85787e9a332f"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
