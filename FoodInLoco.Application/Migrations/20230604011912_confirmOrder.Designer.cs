// <auto-generated />
using System;
using FoodInLoco.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodInLoco.Application.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230604011912_confirmOrder")]
    partial class confirmOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("CoverTax")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Attraction", "Attraction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b482a11d-f86a-4dab-97cd-0837b7ed423b"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6438),
                            Date = new DateTime(2023, 6, 5, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6429),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("864ca04f-3c5b-41f4-974b-d69a9301e289"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6553),
                            Date = new DateTime(2023, 6, 6, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6552),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3b3e9dfe-2ead-4375-8ced-b882675f10aa"),
                            CoverTax = 20.0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6595),
                            Date = new DateTime(2023, 6, 11, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6595),
                            Photo = "https://scontent.fjdo1-1.fna.fbcdn.net/v/t39.30808-6/292709447_483405863791805_379209062390556101_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=09cbfe&_nc_eui2=AeGjo-OBezYn3E16VwXa7mkQ6JZ7t6ANUJbolnu3oA1Qlg3ohBa-81hGAF7BKDuc7tzeYDnnYjaFTra0RtF1YD7d&_nc_ohc=cq57dZpXtzcAX_RAgvH&_nc_ht=scontent.fjdo1-1.fna&oh=00_AfCxsShn3s5eflRMUoUlKFMJbrzj_PU5tNfuDHGVeRlJ0Q&oe=63811EEA",
                            RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WaiterRequested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Bill", "Bill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd9fa246-4b49-4578-9fca-0fdb6e08f782"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6677),
                            Status = 1,
                            TableId = new Guid("a4b7e366-c796-4e0b-a46f-b79011f02b5b")
                        },
                        new
                        {
                            Id = new Guid("acf38482-9914-4a72-9263-e869fdf07f5c"),
                            BillingStatus = 0,
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6681),
                            Status = 1,
                            TableId = new Guid("a8b4437b-a2c6-4ae8-ade9-1cf4109e96e4")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillUser", "BillUser");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("cd9fa246-4b49-4578-9fca-0fdb6e08f782"),
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("cd9fa246-4b49-4578-9fca-0fdb6e08f782"),
                            UserId = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                            Status = 0
                        },
                        new
                        {
                            BillId = new Guid("acf38482-9914-4a72-9263-e869fdf07f5c"),
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                            Status = 1
                        },
                        new
                        {
                            BillId = new Guid("acf38482-9914-4a72-9263-e869fdf07f5c"),
                            UserId = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://menubrands.com.br/wp-content/uploads/2020/04/Menu-300x300.png");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu", "Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b91a518-af8a-4640-9450-e4463df6e385"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5400),
                            InitialDate = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5400),
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3484d42a-ffb8-43d6-9d24-4976dc8753a7"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5764),
                            InitialDate = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5764),
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5986),
                            InitialDate = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(5986),
                            RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem", "MenuItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f53d394c-7f19-44e9-b66a-766542f84269"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6086),
                            MenuId = new Guid("3b91a518-af8a-4640-9450-e4463df6e385"),
                            Quantity = 1,
                            Status = 1,
                            Value = 90.0
                        },
                        new
                        {
                            Id = new Guid("f85a8433-c7ab-4bd6-9dd8-265778c7e4ca"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6197),
                            MenuId = new Guid("3484d42a-ffb8-43d6-9d24-4976dc8753a7"),
                            Quantity = 1,
                            Status = 1,
                            Value = 4.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("a42591d6-61c4-4d3a-99aa-4f970028a6cf"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6244),
                            MenuId = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                            Quantity = 1,
                            Status = 1,
                            Value = 5.4000000000000004
                        },
                        new
                        {
                            Id = new Guid("cb976610-dafc-47f4-88b9-38ce140f1b1a"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6295),
                            MenuId = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                            Quantity = 1,
                            Status = 1,
                            Value = 22.0
                        },
                        new
                        {
                            Id = new Guid("9ef39960-5e42-48af-8b96-4aa988d36441"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6334),
                            MenuId = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                            Quantity = 1,
                            Status = 1,
                            Value = 11.0
                        },
                        new
                        {
                            Id = new Guid("805d2fef-1fed-4791-95d8-d3f0981191cf"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6375),
                            MenuId = new Guid("3484d42a-ffb8-43d6-9d24-4976dc8753a7"),
                            Quantity = 6,
                            Status = 1,
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", "Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8256af38-8eb0-4e63-aa94-86971cad8bad"),
                            BillId = new Guid("cd9fa246-4b49-4578-9fca-0fdb6e08f782"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6718),
                            ItemId = new Guid("f53d394c-7f19-44e9-b66a-766542f84269"),
                            Message = "Completo",
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954")
                        },
                        new
                        {
                            Id = new Guid("13053e27-c6e4-4022-ad11-3db88c2aea86"),
                            BillId = new Guid("cd9fa246-4b49-4578-9fca-0fdb6e08f782"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6724),
                            ItemId = new Guid("f85a8433-c7ab-4bd6-9dd8-265778c7e4ca"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954")
                        },
                        new
                        {
                            Id = new Guid("0e425600-d295-4dc8-8a1d-47f2b4b35f91"),
                            BillId = new Guid("acf38482-9914-4a72-9263-e869fdf07f5c"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6727),
                            ItemId = new Guid("a42591d6-61c4-4d3a-99aa-4f970028a6cf"),
                            Quantity = 2,
                            Status = 1,
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954")
                        },
                        new
                        {
                            Id = new Guid("3db4871b-f95d-45ea-94da-c251ff41b542"),
                            BillId = new Guid("acf38482-9914-4a72-9263-e869fdf07f5c"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6728),
                            ItemId = new Guid("9ef39960-5e42-48af-8b96-4aa988d36441"),
                            Quantity = 1,
                            Status = 1,
                            UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954")
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<short>("SeatQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", "Reservation");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Kids")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasDefaultValue("https://img.freepik.com/free-vector/restaurant-logo_23-2147506959.jpg?w=826&t=st=1668952356~exp=1668952956~hmac=49402768c6b8d28e62ceaf62db752e285911d5b9ec57bb827b2118d98f046d74");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurant", "Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 686, DateTimeKind.Utc).AddTicks(4587),
                            Kids = false,
                            Password = "BJ/ghVSM5nX+6mchonL1z15fmBQuq+BKJMeXncC+5JW9z5kjWYQ36qzTIDMtMWzqFBqq20qs2TRsxAWlOEmE/AmN9Y3MGApHnYzjVYJwr62n7Hyx0dejuaYNVM8v8fwqKPCZ9nVzzKEWvQdAhJ+ugycBsIbG30KEIubodwPp+Wm3tBJZKQ6WKxSyFJehuvyT2WzmL+pWfYdZzx7gknKWp/2GjoS/48WjwY3PbuJwtyZXllQcDriMXVgsngHWInRGjB9K/n/Qv3f4wIviFuPTfY+0IfGRp5vMBk5MpvqiTDp2A1m3XK+Gx+qvmgsejf2qOqqx6SWxInu2riixPdzuOnzAOQmKEE54hG0tycGOfkRz5INeWWv41ux/Pqf0y4HI142U+tOLFSnA0oEtpJYkQM82hy7ChMI7gQdV/6OWcL81Rl0my7zVT3qYvqCrYXFghXdOTgIRacbksbnpi4rxnCgvIg3v74jPlFJq2e5PcFVjaHnDeYs3AUCfTUsLe6Uta+MIB/3pcIrjW4d6b2J8VuUTsIukYbu6PmXxvIqX1ybCLxLE5OXrHI+KOeunKsAZ7IdbYcIlUgMw9WKdsq3QxxbOvP1JYjBorfp8OfyZzRWAvZS3PDUfPzN0QbVW2aCdE/GrTlaI1KKj7bDaBKMhMArBmkEak7pqsBMAiTzdQzs=",
                            Photo = "https://www.mcdonalds.com.br/images/layout/mcdonalds-logo-footer-bg-white.png",
                            Salt = "8f0dbd54-1779-4f65-89b7-dc443abec552",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(4524),
                            Kids = true,
                            Password = "5eaRiB5J+uGmXIN9YCaOtOpoF9xLdtOnE+pPaGLyrVo4E2TSP21J3bxLcHkpjVkkzAuvcF6NzYGWgF6mhpE9hQQKqBqWD1ucAT9dDV2IaoKHumxBJF2pJOmkZ4pVjK1RWx1KNO2l+Twc5cpLqZ7SMrfEHyUSz/S6N1cSlEbFe8lq4EvKMZY4+FRLimjyHEp9fVI1ZklJ6nhl6Qy+HmjvgfS5TkXg+ayIVibr7M5+/en0ue7abOj1+l8o/BJR18EDIY24wcCM+F4c8rLTXTxGYL/WNT6MFKmGQOlNRuRidwMYfF/Vohv2puEPuE0LXMaUGPqL/u0bViVcescpRxHz/3eKsIgRceEqTMuSOwfZ799mhGUydd4O4SgQonfXyAQlaTHg5lVu0jLaMo5YiCY1kGmWtWoZWEq2tQdjaPyoNqOEDzC9Q8Nhx4vNnsF0fCHOojiRotox32KMlrhKzXpQp6SzXF3LFkWINcbAkG8U4q+Oz6hzBs2/KtMhusVAdWvMDAkZqp2YtXYBOSjbcdMz2tPMXq1lbxmCR6UMRMa6eccdWK5urqv+TTDMpbycTUPKrcd1R09c/xpGKktdBlJVCyCn+1iVL1aV/CjQAhdZNwq8tcayXBuO/k350p3Gcc/tuQEDR81sptMmUBpUz5TWVkTyzVMI647/6U1yQjcQALg=",
                            Photo = "https://d3sn2rlrwxy0ce.cloudfront.net/_800x600_crop_center-center_none/Burger-King-Novo-logo.png?mtime=20210125152539&focal=none&tmtime=20210726130340",
                            Salt = "ce42c45f-0e13-4623-8f0e-2ddb9f6aac0b",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", "Review");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table", "Table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4b7e366-c796-4e0b-a46f-b79011f02b5b"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6647),
                            Number = 1,
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("91bcce23-12ad-444c-9462-abf3de03e289"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6651),
                            Number = 2,
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2e41fd8b-233b-4967-8d7a-d4697ff05ca8"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6653),
                            Number = 3,
                            RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a8b4437b-a2c6-4ae8-ade9-1cf4109e96e4"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6654),
                            Number = 1,
                            RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5c6a24bc-63d6-4276-885a-b14ca1cf1108"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 775, DateTimeKind.Utc).AddTicks(6655),
                            Number = 2,
                            RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c7edea8-0237-4154-9f07-233ee2f1743f"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 408, DateTimeKind.Utc).AddTicks(1858),
                            Password = "e4bjYvtnYozwkpD0+8JU7cJYly0OFAD2GCWghHZOse44Dve9m70DqO5n28McJkCxgchsuaD6IYfgodj94W6HWbmDv1RM8hA927yETTOWDVb49YxYH9VSzcyjFn2HkYadyXSUHYYvPOdZdFpJ59qhT/sRv1u7voOGbaxfIO3V4iMDK6qY2xbops4LQTCtphdaekeT/s5hYXbLxNl/Z8+io6LI8+56C/y708uZfXjmwII2JHf+klC5ETn16fV60nxsp57zl24LiYNBr5XtuepHeQs4Lbaq+yeH+WxJXewBWESRYID5HKPmPtWEjxAMtvBKxVRNqyTHejHMk3hMHlacKM32gkYAAW+Er/vwxHEsbkOcaODH/l/axnO6hyBBSPgMd852e+eUcPk8/LkQ/99UlfI578Z1NQFvePh9ITJk+hmLX+8tlC+yPmld7e487GDDu3DusQRBZjhN0R+zk/dE1PHkI07UzHe+2StfvQllQyhmarmzpEMnLDBkZmoy7Dr7Mxb+pTWZrxnptwi6dDNqMS8qBZwTmysBA+FztKaGRxUvvip+jkq9n+IqOdiFBSA4NNQ0d5Ld0t9wt0DAyeCDz8emz+aCJK8PzdFZtinBRLB/fuEnZNdvxubuRV9xcU7PN/hT43OGgtrhreu2wAVxzEudwLO39AvfBVbGeI+Mhiw=",
                            Salt = "c454a02a-d431-4ec8-bd7b-04f768f36aec",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 500, DateTimeKind.Utc).AddTicks(4989),
                            Password = "2xT2RmTOIqZ9hVlb/9QcUB2w/FMmOg5gRVHQFdopGROb7RiLndvjW/d+nBqGcL03ISAgBQsm2TvqYDTpi+pskpG4RNR6XLxZFauqxnm5o7m4TNxFAMS/scCWNHTjLUwm19tRIRAplwYPW+Wtd8yaPLgoXxwdOPxC/NiYG4Ku1EuHPTxozNAlsb9CO1obeDxuUApJsd+f3SQtdF0WWAHd4F0wiLvOTRnXa8bBqOjnHSBqa5psNl3zM1SARnMV1MsxFekx666NMJAWNtE2Q0qTamvQNdkBSPZf4i0kk+k9KrDzaOSazvt6ByT5LZjRXoM1zZVwQPxRzemcpYDW23JXMNAuB5ryvNPsuTehirSnGoPcKseCZ34fu1BY9WKxpW7tKcw69Xh8PfERq0y5Z4QGkdrZ3eoXLeQVn02DBmWGE/XA6hazHZVfiZCz1Ng1+IINr6sIt909ovk8100JWKAlK2RSZExtoz4hxUw4pEQoYLdQ238tgtRx6qmdquzieIt5Sv6e3TuZcTIAXge6p+ikHNFEjrPOFu50IjNc3jkebj4+F1wd1BQ22qCADot70mE3biB2agsnSKo/X1KWKkrJ4+LSGnLqrhzqO3eKcsfrbXLpWxtJycWlH73nX47Vp0lvxF8ur1xh8daxQvgcAKBr+IY6lApNQ/oEB3s0DJPD1CY=",
                            Salt = "2cb957d5-4378-477e-a784-ef2125255c9e",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                            CreatedAt = new DateTime(2023, 6, 4, 1, 19, 11, 605, DateTimeKind.Utc).AddTicks(3301),
                            Password = "Lmwd2h0ny9GDe/9L2ICxrpJdUZ8e8JkywFqvooFjW8ENVFmrhH9tOPxf93EibhE5FUJfk350SXVEAMCs4m0kz7H86e/W7yQHOCqHDqkZXQC0YfCHRik5inxRAAfWnSmkVeS99gFimGHl86d6lEwMCucWupmtjhbiMnsZcJr+0F2YGaK3aGO2HEyCUf/osmrKME/FvLER4zQ/7llt3WZefUoJIRo8B++pwaE3kUBwKri8u9EzQX6ENUcdZ5kVWG6zpuTQXA7hgsFBU9CK+UsMpK5do/qn/J5Yz9LJw0/Yb3JKwih6XbJNUuVfZwCtsik86BrqxvRmJ4fH64w7Na4ptgxk25yBD93GtSn8zPhD389GFToMUO6OriyD7nVmpXwFEzsNGY5/OZhIhbAZMzj0moj8U8bqfvXDvS7bJ+fQv3/RVQIF02EwbdxSpNABVuOvsCAr6MCIY8uYu9E2whqqyybcW0g1aT8LHdMR20Xu9ee35V1QD817c4Fx1oEZFVTrS+gnwymYiP2sVo34sQrj3a9Ys3h3sosgGYGE4xqlasVvN1NMk6puBToZjhlZ5TiuKOMdfTzOLCXeHShF6MT+Cqe0ejrZob0dfcNbbbWeoL6xnExJ/3VDtkMWuztG2d61sFpYkwNpYU4yHc0SC5q73SuvrbG9CfbDKKOT0o7mMLU=",
                            Salt = "b273d987-846d-4862-978d-deeb97a14ab0",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Attraction", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Attractions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("AttractionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AttractionId");

                            b1.ToTable("Attraction", "Attraction");

                            b1.WithOwner()
                                .HasForeignKey("AttractionId");

                            b1.HasData(
                                new
                                {
                                    AttractionId = new Guid("b482a11d-f86a-4dab-97cd-0837b7ed423b"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("864ca04f-3c5b-41f4-974b-d69a9301e289"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                },
                                new
                                {
                                    AttractionId = new Guid("3b3e9dfe-2ead-4375-8ced-b882675f10aa"),
                                    Description = "Excelente banda.",
                                    Name = "Fets Domino"
                                });
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Table", "Table")
                        .WithMany("Bills")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.BillUser", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("BillUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("3b91a518-af8a-4640-9450-e4463df6e385"),
                                    Description = "Cardápio de vinhos.",
                                    Name = "Wine"
                                },
                                new
                                {
                                    MenuId = new Guid("3484d42a-ffb8-43d6-9d24-4976dc8753a7"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                },
                                new
                                {
                                    MenuId = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                                    Description = "Cardápio de Happy Hour.",
                                    Name = "Happy Hour"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.HappyHour", "HappyHour", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndAt");

                            b1.Property<TimeOnly?>("StartAt")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartAt");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("HappyHour");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menu", "Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.HasData(
                                new
                                {
                                    MenuId = new Guid("3b91a518-af8a-4640-9450-e4463df6e385"),
                                    Value = false
                                },
                                new
                                {
                                    MenuId = new Guid("3484d42a-ffb8-43d6-9d24-4976dc8753a7"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                },
                                new
                                {
                                    MenuId = new Guid("006ececc-294d-45d9-84af-fb677d04ee3c"),
                                    EndAt = new TimeOnly(20, 0, 0),
                                    StartAt = new TimeOnly(16, 30, 0),
                                    Value = true
                                });
                        });

                    b.Navigation("HappyHour")
                        .IsRequired();

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItem", "MenuItem");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");

                            b1.HasData(
                                new
                                {
                                    MenuItemId = new Guid("f53d394c-7f19-44e9-b66a-766542f84269"),
                                    Description = "Vinho de uva.",
                                    Name = "Vinho Quinta do Morgado"
                                },
                                new
                                {
                                    MenuItemId = new Guid("f85a8433-c7ab-4bd6-9dd8-265778c7e4ca"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("a42591d6-61c4-4d3a-99aa-4f970028a6cf"),
                                    Description = "Chopp de Brahma.",
                                    Name = "Chopp"
                                },
                                new
                                {
                                    MenuItemId = new Guid("cb976610-dafc-47f4-88b9-38ce140f1b1a"),
                                    Description = "Hamburguer feito com pão brioche (homemade), 90g de blend, queijo cheddar, cebola caramelizada, picles e molho da casa.",
                                    Name = "Hamburguer"
                                },
                                new
                                {
                                    MenuItemId = new Guid("9ef39960-5e42-48af-8b96-4aa988d36441"),
                                    Description = "Porção de batata feita com a melhor batata que existe (Burger King).",
                                    Name = "Porção de batata"
                                },
                                new
                                {
                                    MenuItemId = new Guid("805d2fef-1fed-4791-95d8-d3f0981191cf"),
                                    Description = "Empanados de frango recheados com queijo.",
                                    Name = "Chicken Nuggets"
                                });
                        });

                    b.Navigation("Menu");

                    b.Navigation("NameDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Order", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.MenuItem", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.User", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId");

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                                    DDD = "85",
                                    PhoneNumber = "998888888"
                                },
                                new
                                {
                                    RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                                    DDD = "85",
                                    PhoneNumber = "997777777"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                                    Value = "mcdonalds@foodinloco.com"
                                },
                                new
                                {
                                    RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                                    Value = "burgerking@foodinloco.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Complement");

                            b1.Property<long?>("Number")
                                .IsRequired()
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                                    City = "Fortaleza",
                                    Complement = "Apto 004, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                },
                                new
                                {
                                    RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                                    City = "Fortaleza",
                                    Complement = "Apto 001, Bloco D",
                                    Number = 150L,
                                    State = "Ceará",
                                    Street = "Travessa Elisiário Mendes",
                                    ZipCode = "60841477"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("TradingName")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("TradingName");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurant", "Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = new Guid("e1b9408f-9462-43fe-ae85-187cb8ecffa2"),
                                    CompanyName = "Mc Donalds",
                                    TradingName = "Méqui"
                                },
                                new
                                {
                                    RestaurantId = new Guid("5789cc3f-b35f-4e07-8bfe-005c491cd076"),
                                    CompanyName = "Burger King",
                                    TradingName = "BK"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Review", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("FoodInLoco.Application.Data.Entities.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodInLoco.Application.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.NameDescription", "NameDescription", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review", "Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("NameDescription")
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.HasOne("FoodInLoco.Application.Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DDD")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("DDD");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("9c7edea8-0237-4154-9f07-233ee2f1743f"),
                                    DDD = "85",
                                    PhoneNumber = "999999999"
                                },
                                new
                                {
                                    UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                                    DDD = "85",
                                    PhoneNumber = "997851936"
                                },
                                new
                                {
                                    UserId = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                                    DDD = "85",
                                    PhoneNumber = "999174742"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("9c7edea8-0237-4154-9f07-233ee2f1743f"),
                                    Value = "admin@foodinloco.com"
                                },
                                new
                                {
                                    UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                                    Value = "letter.pedro@gmail.com"
                                },
                                new
                                {
                                    UserId = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                                    Value = "gabrielevaristovcp@gmail.com"
                                });
                        });

                    b.OwnsOne("FoodInLoco.Application.Data.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("9c7edea8-0237-4154-9f07-233ee2f1743f"),
                                    FirstName = "Admin",
                                    LastName = "FoodInLoco"
                                },
                                new
                                {
                                    UserId = new Guid("840c5834-8997-46f4-b172-1567f2283954"),
                                    FirstName = "Pedro",
                                    LastName = "Lopes de Oliveira"
                                },
                                new
                                {
                                    UserId = new Guid("83e64526-b605-4443-a066-3f7a5815a58d"),
                                    FirstName = "Gabriel",
                                    LastName = "Evaristo"
                                });
                        });

                    b.Navigation("CellPhone")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.MenuItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Menus");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.Table", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FoodInLoco.Application.Data.Entities.User", b =>
                {
                    b.Navigation("BillUsers");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
